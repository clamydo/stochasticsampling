/* automatically generated by rust-bindgen */

pub const _STDIO_H : :: std :: os :: raw :: c_uint = 1 ; pub const _FEATURES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _DEFAULT_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC11 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC99 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC95 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX_IMPLICITLY : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_C_SOURCE : :: std :: os :: raw :: c_uint = 200809 ; pub const __USE_POSIX : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX2 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199309 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199506 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K8 : :: std :: os :: raw :: c_uint = 1 ; pub const _ATFILE_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_MISC : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ATFILE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_FORTIFY_LEVEL : :: std :: os :: raw :: c_uint = 0 ; pub const _STDC_PREDEF_H : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559_COMPLEX__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_ISO_10646__ : :: std :: os :: raw :: c_uint = 201605 ; pub const __STDC_NO_THREADS__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GNU_LIBRARY__ : :: std :: os :: raw :: c_uint = 6 ; pub const __GLIBC__ : :: std :: os :: raw :: c_uint = 2 ; pub const __GLIBC_MINOR__ : :: std :: os :: raw :: c_uint = 24 ; pub const _SYS_CDEFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const __WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : :: std :: os :: raw :: c_uint = 1 ; pub const __SYSCALL_WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const _BITS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPESIZES_H : :: std :: os :: raw :: c_uint = 1 ; pub const __OFF_T_MATCHES_OFF64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __INO_T_MATCHES_INO64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const __FILE_defined : :: std :: os :: raw :: c_uint = 1 ; pub const ____FILE_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _G_config_h : :: std :: os :: raw :: c_uint = 1 ; pub const ____mbstate_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _G_HAVE_MMAP : :: std :: os :: raw :: c_uint = 1 ; pub const _G_HAVE_MREMAP : :: std :: os :: raw :: c_uint = 1 ; pub const _G_IO_IO_FILE_VERSION : :: std :: os :: raw :: c_uint = 131073 ; pub const _G_BUFSIZ : :: std :: os :: raw :: c_uint = 8192 ; pub const _IO_BUFSIZ : :: std :: os :: raw :: c_uint = 8192 ; pub const __GNUC_VA_LIST : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_UNIFIED_JUMPTABLES : :: std :: os :: raw :: c_uint = 1 ; pub const EOF : :: std :: os :: raw :: c_int = -1 ; pub const _IOS_INPUT : :: std :: os :: raw :: c_uint = 1 ; pub const _IOS_OUTPUT : :: std :: os :: raw :: c_uint = 2 ; pub const _IOS_ATEND : :: std :: os :: raw :: c_uint = 4 ; pub const _IOS_APPEND : :: std :: os :: raw :: c_uint = 8 ; pub const _IOS_TRUNC : :: std :: os :: raw :: c_uint = 16 ; pub const _IOS_NOCREATE : :: std :: os :: raw :: c_uint = 32 ; pub const _IOS_NOREPLACE : :: std :: os :: raw :: c_uint = 64 ; pub const _IOS_BIN : :: std :: os :: raw :: c_uint = 128 ; pub const _IO_MAGIC : :: std :: os :: raw :: c_uint = 4222418944 ; pub const _OLD_STDIO_MAGIC : :: std :: os :: raw :: c_uint = 4206624768 ; pub const _IO_MAGIC_MASK : :: std :: os :: raw :: c_uint = 4294901760 ; pub const _IO_USER_BUF : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_UNBUFFERED : :: std :: os :: raw :: c_uint = 2 ; pub const _IO_NO_READS : :: std :: os :: raw :: c_uint = 4 ; pub const _IO_NO_WRITES : :: std :: os :: raw :: c_uint = 8 ; pub const _IO_EOF_SEEN : :: std :: os :: raw :: c_uint = 16 ; pub const _IO_ERR_SEEN : :: std :: os :: raw :: c_uint = 32 ; pub const _IO_DELETE_DONT_CLOSE : :: std :: os :: raw :: c_uint = 64 ; pub const _IO_LINKED : :: std :: os :: raw :: c_uint = 128 ; pub const _IO_IN_BACKUP : :: std :: os :: raw :: c_uint = 256 ; pub const _IO_LINE_BUF : :: std :: os :: raw :: c_uint = 512 ; pub const _IO_TIED_PUT_GET : :: std :: os :: raw :: c_uint = 1024 ; pub const _IO_CURRENTLY_PUTTING : :: std :: os :: raw :: c_uint = 2048 ; pub const _IO_IS_APPENDING : :: std :: os :: raw :: c_uint = 4096 ; pub const _IO_IS_FILEBUF : :: std :: os :: raw :: c_uint = 8192 ; pub const _IO_BAD_SEEN : :: std :: os :: raw :: c_uint = 16384 ; pub const _IO_USER_LOCK : :: std :: os :: raw :: c_uint = 32768 ; pub const _IO_FLAGS2_MMAP : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_FLAGS2_NOTCANCEL : :: std :: os :: raw :: c_uint = 2 ; pub const _IO_FLAGS2_USER_WBUF : :: std :: os :: raw :: c_uint = 8 ; pub const _IO_SKIPWS : :: std :: os :: raw :: c_uint = 1 ; pub const _IO_LEFT : :: std :: os :: raw :: c_uint = 2 ; pub const _IO_RIGHT : :: std :: os :: raw :: c_uint = 4 ; pub const _IO_INTERNAL : :: std :: os :: raw :: c_uint = 8 ; pub const _IO_DEC : :: std :: os :: raw :: c_uint = 16 ; pub const _IO_OCT : :: std :: os :: raw :: c_uint = 32 ; pub const _IO_HEX : :: std :: os :: raw :: c_uint = 64 ; pub const _IO_SHOWBASE : :: std :: os :: raw :: c_uint = 128 ; pub const _IO_SHOWPOINT : :: std :: os :: raw :: c_uint = 256 ; pub const _IO_UPPERCASE : :: std :: os :: raw :: c_uint = 512 ; pub const _IO_SHOWPOS : :: std :: os :: raw :: c_uint = 1024 ; pub const _IO_SCIENTIFIC : :: std :: os :: raw :: c_uint = 2048 ; pub const _IO_FIXED : :: std :: os :: raw :: c_uint = 4096 ; pub const _IO_UNITBUF : :: std :: os :: raw :: c_uint = 8192 ; pub const _IO_STDIO : :: std :: os :: raw :: c_uint = 16384 ; pub const _IO_DONT_CLOSE : :: std :: os :: raw :: c_uint = 32768 ; pub const _IO_BOOLALPHA : :: std :: os :: raw :: c_uint = 65536 ; pub const _IOFBF : :: std :: os :: raw :: c_uint = 0 ; pub const _IOLBF : :: std :: os :: raw :: c_uint = 1 ; pub const _IONBF : :: std :: os :: raw :: c_uint = 2 ; pub const BUFSIZ : :: std :: os :: raw :: c_uint = 8192 ; pub const SEEK_SET : :: std :: os :: raw :: c_uint = 0 ; pub const SEEK_CUR : :: std :: os :: raw :: c_uint = 1 ; pub const SEEK_END : :: std :: os :: raw :: c_uint = 2 ; pub const P_tmpdir : & 'static [ u8 ; 5usize ] = b"/tmp\0" ; pub const L_tmpnam : :: std :: os :: raw :: c_uint = 20 ; pub const TMP_MAX : :: std :: os :: raw :: c_uint = 238328 ; pub const FILENAME_MAX : :: std :: os :: raw :: c_uint = 4096 ; pub const L_ctermid : :: std :: os :: raw :: c_uint = 9 ; pub const FOPEN_MAX : :: std :: os :: raw :: c_uint = 16 ; pub const FFTW_FORWARD : :: std :: os :: raw :: c_int = -1 ; pub const FFTW_BACKWARD : :: std :: os :: raw :: c_uint = 1 ; pub const FFTW_NO_TIMELIMIT : f64 = -1. ; pub const FFTW_MEASURE : :: std :: os :: raw :: c_uint = 0 ; pub const FFTW_DESTROY_INPUT : :: std :: os :: raw :: c_uint = 1 ; pub const FFTW_UNALIGNED : :: std :: os :: raw :: c_uint = 2 ; pub const FFTW_CONSERVE_MEMORY : :: std :: os :: raw :: c_uint = 4 ; pub const FFTW_EXHAUSTIVE : :: std :: os :: raw :: c_uint = 8 ; pub const FFTW_PRESERVE_INPUT : :: std :: os :: raw :: c_uint = 16 ; pub const FFTW_PATIENT : :: std :: os :: raw :: c_uint = 32 ; pub const FFTW_ESTIMATE : :: std :: os :: raw :: c_uint = 64 ; pub const FFTW_WISDOM_ONLY : :: std :: os :: raw :: c_uint = 2097152 ; pub const FFTW_ESTIMATE_PATIENT : :: std :: os :: raw :: c_uint = 128 ; pub const FFTW_BELIEVE_PCOST : :: std :: os :: raw :: c_uint = 256 ; pub const FFTW_NO_DFT_R2HC : :: std :: os :: raw :: c_uint = 512 ; pub const FFTW_NO_NONTHREADED : :: std :: os :: raw :: c_uint = 1024 ; pub const FFTW_NO_BUFFERING : :: std :: os :: raw :: c_uint = 2048 ; pub const FFTW_NO_INDIRECT_OP : :: std :: os :: raw :: c_uint = 4096 ; pub const FFTW_ALLOW_LARGE_GENERIC : :: std :: os :: raw :: c_uint = 8192 ; pub const FFTW_NO_RANK_SPLITS : :: std :: os :: raw :: c_uint = 16384 ; pub const FFTW_NO_VRANK_SPLITS : :: std :: os :: raw :: c_uint = 32768 ; pub const FFTW_NO_VRECURSE : :: std :: os :: raw :: c_uint = 65536 ; pub const FFTW_NO_SIMD : :: std :: os :: raw :: c_uint = 131072 ; pub const FFTW_NO_SLOW : :: std :: os :: raw :: c_uint = 262144 ; pub const FFTW_NO_FIXED_RADIX_LARGE_N : :: std :: os :: raw :: c_uint = 524288 ; pub const FFTW_ALLOW_PRUNING : :: std :: os :: raw :: c_uint = 1048576 ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __fsid_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __qaddr_t = * mut __quad_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type FILE = _IO_FILE ; pub type __FILE = _IO_FILE ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __mbstate_t { pub __count : :: std :: os :: raw :: c_int , pub __value : __mbstate_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t__bindgen_ty_1 { pub __wch : :: std :: os :: raw :: c_uint , pub __wchb : [ :: std :: os :: raw :: c_char ; 4usize ] , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout___mbstate_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t__bindgen_ty_1 > ( ) ) ) . __wch as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t__bindgen_ty_1 > ( ) ) ) . __wchb as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb ) ) ) ; } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __count as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __value as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos_t { pub __pos : __off_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos_t > ( ) ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos_t > ( ) ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __state ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos64_t { pub __pos : __off64_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos64_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos64_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos64_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos64_t > ( ) ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _G_fpos64_t > ( ) ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type va_list = __builtin_va_list ; pub type __gnuc_va_list = __builtin_va_list ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_jump_t { _unused : [ u8 ; 0 ] } pub type _IO_lock_t = :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_marker { pub _next : * mut _IO_marker , pub _sbuf : * mut _IO_FILE , pub _pos : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__IO_marker ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_marker > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _IO_marker ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_marker > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_marker ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_marker > ( ) ) ) . _next as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _IO_marker ) , "::" , stringify ! ( _next ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_marker > ( ) ) ) . _sbuf as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _IO_marker ) , "::" , stringify ! ( _sbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_marker > ( ) ) ) . _pos as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _IO_marker ) , "::" , stringify ! ( _pos ) ) ) ; } pub const __codecvt_result___codecvt_ok : __codecvt_result = 0 ; pub const __codecvt_result___codecvt_partial : __codecvt_result = 1 ; pub const __codecvt_result___codecvt_error : __codecvt_result = 2 ; pub const __codecvt_result___codecvt_noconv : __codecvt_result = 3 ; pub type __codecvt_result = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE { pub _flags : :: std :: os :: raw :: c_int , pub _IO_read_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_read_end : * mut :: std :: os :: raw :: c_char , pub _IO_read_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_write_end : * mut :: std :: os :: raw :: c_char , pub _IO_buf_base : * mut :: std :: os :: raw :: c_char , pub _IO_buf_end : * mut :: std :: os :: raw :: c_char , pub _IO_save_base : * mut :: std :: os :: raw :: c_char , pub _IO_backup_base : * mut :: std :: os :: raw :: c_char , pub _IO_save_end : * mut :: std :: os :: raw :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : :: std :: os :: raw :: c_int , pub _flags2 : :: std :: os :: raw :: c_int , pub _old_offset : __off_t , pub _cur_column : :: std :: os :: raw :: c_ushort , pub _vtable_offset : :: std :: os :: raw :: c_schar , pub _shortbuf : [ :: std :: os :: raw :: c_char ; 1usize ] , pub _lock : * mut _IO_lock_t , pub _offset : __off64_t , pub __pad1 : * mut :: std :: os :: raw :: c_void , pub __pad2 : * mut :: std :: os :: raw :: c_void , pub __pad3 : * mut :: std :: os :: raw :: c_void , pub __pad4 : * mut :: std :: os :: raw :: c_void , pub __pad5 : usize , pub _mode : :: std :: os :: raw :: c_int , pub _unused2 : [ :: std :: os :: raw :: c_char ; 20usize ] , } # [ test ] fn bindgen_test_layout__IO_FILE ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_FILE > ( ) , 216usize , concat ! ( "Size of: " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_FILE > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_ptr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_end as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_read_base as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_base as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_ptr as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_write_end as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_buf_base as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_buf_end as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_save_base as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_backup_base as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_backup_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _IO_save_end as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _markers as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _markers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _chain as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _chain ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _fileno as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _fileno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _flags2 as * const _ as usize } , 116usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _old_offset as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _old_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _cur_column as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _cur_column ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _vtable_offset as * const _ as usize } , 130usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _vtable_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _shortbuf as * const _ as usize } , 131usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _shortbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _lock as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _offset as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad1 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad2 as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad3 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad4 as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . __pad5 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _mode as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _IO_FILE > ( ) ) ) . _unused2 as * const _ as usize } , 196usize , concat ! ( "Offset of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _unused2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE_plus { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}_IO_2_1_stdin_" ] 
 pub static mut  _IO_2_1_stdin_  :  _IO_FILE_plus ;
} extern "C" {
 # [ link_name = "\u{1}_IO_2_1_stdout_" ] 
 pub static mut  _IO_2_1_stdout_  :  _IO_FILE_plus ;
} extern "C" {
 # [ link_name = "\u{1}_IO_2_1_stderr_" ] 
 pub static mut  _IO_2_1_stderr_  :  _IO_FILE_plus ;
} pub type __io_read_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void , __buf : * mut :: std :: os :: raw :: c_char , __nbytes : usize ) -> __ssize_t > ; pub type __io_write_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void , __buf : * const :: std :: os :: raw :: c_char , __n : usize ) -> __ssize_t > ; pub type __io_seek_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void , __pos : * mut __off64_t , __w : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub type __io_close_fn = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn __underflow ( arg1 : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __uflow ( arg1 : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn __overflow ( arg1 : * mut _IO_FILE , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_getc ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_putc ( __c : :: std :: os :: raw :: c_int , __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_feof ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_ferror ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_peekc_locked ( __fp : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_flockfile ( arg1 : * mut _IO_FILE , ) ; 
} extern "C" {
 pub fn _IO_funlockfile ( arg1 : * mut _IO_FILE , ) ; 
} extern "C" {
 pub fn _IO_ftrylockfile ( arg1 : * mut _IO_FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_vfscanf ( arg1 : * mut _IO_FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_vfprintf ( arg1 : * mut _IO_FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _IO_padn ( arg1 : * mut _IO_FILE , arg2 : :: std :: os :: raw :: c_int , arg3 : __ssize_t , ) -> __ssize_t ; 
} extern "C" {
 pub fn _IO_sgetn ( arg1 : * mut _IO_FILE , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : usize , ) -> usize ; 
} extern "C" {
 pub fn _IO_seekoff ( arg1 : * mut _IO_FILE , arg2 : __off64_t , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> __off64_t ; 
} extern "C" {
 pub fn _IO_seekpos ( arg1 : * mut _IO_FILE , arg2 : __off64_t , arg3 : :: std :: os :: raw :: c_int , ) -> __off64_t ; 
} extern "C" {
 pub fn _IO_free_backup_area ( arg1 : * mut _IO_FILE , ) ; 
} pub type off_t = __off_t ; pub type fpos_t = _G_fpos_t ; extern "C" {
 # [ link_name = "\u{1}stdin" ] 
 pub static mut  stdin  :  * mut _IO_FILE ;
} extern "C" {
 # [ link_name = "\u{1}stdout" ] 
 pub static mut  stdout  :  * mut _IO_FILE ;
} extern "C" {
 # [ link_name = "\u{1}stderr" ] 
 pub static mut  stderr  :  * mut _IO_FILE ;
} extern "C" {
 pub fn remove ( __filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn rename ( __old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn renameat ( __oldfd : :: std :: os :: raw :: c_int , __old : * const :: std :: os :: raw :: c_char , __newfd : :: std :: os :: raw :: c_int , __new : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn tmpfile ( ) -> * mut FILE ; 
} extern "C" {
 pub fn tmpnam ( __s : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn tmpnam_r ( __s : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn tempnam ( __dir : * const :: std :: os :: raw :: c_char , __pfx : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fclose ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fflush ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fflush_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn freopen ( __filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , __stream : * mut FILE , ) -> * mut FILE ; 
} extern "C" {
 pub fn fdopen ( __fd : :: std :: os :: raw :: c_int , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn fmemopen ( __s : * mut :: std :: os :: raw :: c_void , __len : usize , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn open_memstream ( __bufloc : * mut * mut :: std :: os :: raw :: c_char , __sizeloc : * mut usize , ) -> * mut FILE ; 
} extern "C" {
 pub fn setbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn setvbuf ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __modes : :: std :: os :: raw :: c_int , __n : usize , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn setbuffer ( __stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __size : usize , ) ; 
} extern "C" {
 pub fn setlinebuf ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn fprintf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn printf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vfprintf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vprintf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vsprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn snprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : usize , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vsnprintf ( __s : * mut :: std :: os :: raw :: c_char , __maxlen : usize , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vdprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn dprintf ( __fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fscanf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn scanf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn sscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_fscanf" ] 
 pub fn fscanf1 ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_scanf" ] 
 pub fn scanf1 ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_sscanf" ] 
 pub fn sscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vfscanf ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vscanf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn vsscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_vfscanf" ] 
 pub fn vfscanf1 ( __s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_vscanf" ] 
 pub fn vscanf1 ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}__isoc99_vsscanf" ] 
 pub fn vsscanf1 ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut __va_list_tag , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fgetc ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getc ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getc_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getchar_unlocked ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fgetc_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fputc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putchar ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fputc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putc_unlocked ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putchar_unlocked ( __c : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn getw ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn putw ( __w : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fgets ( __s : * mut :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn __getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn getdelim ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn getline ( __lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn fputs ( __s : * const :: std :: os :: raw :: c_char , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn puts ( __s : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ungetc ( __c : :: std :: os :: raw :: c_int , __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fread ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fwrite ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __s : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fread_unlocked ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fwrite_unlocked ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fseek ( __stream : * mut FILE , __off : :: std :: os :: raw :: c_long , __whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ftell ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn rewind ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn fseeko ( __stream : * mut FILE , __off : __off_t , __whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ftello ( __stream : * mut FILE , ) -> __off_t ; 
} extern "C" {
 pub fn fgetpos ( __stream : * mut FILE , __pos : * mut fpos_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fsetpos ( __stream : * mut FILE , __pos : * const fpos_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clearerr ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn feof ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ferror ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn clearerr_unlocked ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn feof_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ferror_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn perror ( __s : * const :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 # [ link_name = "\u{1}sys_nerr" ] 
 pub static mut  sys_nerr  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}sys_errlist" ] 
 pub static mut  sys_errlist  :  [ * const :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 pub fn fileno ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fileno_unlocked ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn popen ( __command : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn pclose ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn ctermid ( __s : * mut :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn flockfile ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn ftrylockfile ( __stream : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn funlockfile ( __stream : * mut FILE , ) ; 
} pub const fftw_r2r_kind_do_not_use_me_FFTW_R2HC : fftw_r2r_kind_do_not_use_me = 0 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_HC2R : fftw_r2r_kind_do_not_use_me = 1 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_DHT : fftw_r2r_kind_do_not_use_me = 2 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT00 : fftw_r2r_kind_do_not_use_me = 3 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT01 : fftw_r2r_kind_do_not_use_me = 4 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT10 : fftw_r2r_kind_do_not_use_me = 5 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_REDFT11 : fftw_r2r_kind_do_not_use_me = 6 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT00 : fftw_r2r_kind_do_not_use_me = 7 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT01 : fftw_r2r_kind_do_not_use_me = 8 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT10 : fftw_r2r_kind_do_not_use_me = 9 ; pub const fftw_r2r_kind_do_not_use_me_FFTW_RODFT11 : fftw_r2r_kind_do_not_use_me = 10 ; pub type fftw_r2r_kind_do_not_use_me = :: std :: os :: raw :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fftw_iodim_do_not_use_me { pub n : :: std :: os :: raw :: c_int , pub is : :: std :: os :: raw :: c_int , pub os : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_fftw_iodim_do_not_use_me ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fftw_iodim_do_not_use_me > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( fftw_iodim_do_not_use_me ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fftw_iodim_do_not_use_me > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( fftw_iodim_do_not_use_me ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fftw_iodim_do_not_use_me > ( ) ) ) . n as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( fftw_iodim_do_not_use_me ) , "::" , stringify ! ( n ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fftw_iodim_do_not_use_me > ( ) ) ) . is as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( fftw_iodim_do_not_use_me ) , "::" , stringify ! ( is ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fftw_iodim_do_not_use_me > ( ) ) ) . os as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( fftw_iodim_do_not_use_me ) , "::" , stringify ! ( os ) ) ) ; } pub type wchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : f64 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < max_align_t > ( ) ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < max_align_t > ( ) ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fftw_iodim64_do_not_use_me { pub n : isize , pub is : isize , pub os : isize , } # [ test ] fn bindgen_test_layout_fftw_iodim64_do_not_use_me ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fftw_iodim64_do_not_use_me > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( fftw_iodim64_do_not_use_me ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fftw_iodim64_do_not_use_me > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fftw_iodim64_do_not_use_me ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fftw_iodim64_do_not_use_me > ( ) ) ) . n as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( fftw_iodim64_do_not_use_me ) , "::" , stringify ! ( n ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fftw_iodim64_do_not_use_me > ( ) ) ) . is as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( fftw_iodim64_do_not_use_me ) , "::" , stringify ! ( is ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fftw_iodim64_do_not_use_me > ( ) ) ) . os as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( fftw_iodim64_do_not_use_me ) , "::" , stringify ! ( os ) ) ) ; } pub type fftw_write_char_func_do_not_use_me = :: std :: option :: Option < unsafe extern "C" fn ( c : :: std :: os :: raw :: c_char , arg1 : * mut :: std :: os :: raw :: c_void ) > ; pub type fftw_read_char_func_do_not_use_me = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type fftw_complex = [ f64 ; 2usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fftw_plan_s { _unused : [ u8 ; 0 ] } pub type fftw_plan = * mut fftw_plan_s ; pub type fftw_iodim = fftw_iodim_do_not_use_me ; pub type fftw_iodim64 = fftw_iodim64_do_not_use_me ; pub use self :: fftw_r2r_kind_do_not_use_me as fftw_r2r_kind ; pub type fftw_write_char_func = fftw_write_char_func_do_not_use_me ; pub type fftw_read_char_func = fftw_read_char_func_do_not_use_me ; extern "C" {
 pub fn fftw_execute ( p : fftw_plan , ) ; 
} extern "C" {
 pub fn fftw_plan_dft ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut fftw_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut fftw_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut fftw_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut fftw_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_many_dft ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut fftw_complex , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , in_ : * mut fftw_complex , out : * mut fftw_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_split_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , ri : * mut f64 , ii : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , in_ : * mut fftw_complex , out : * mut fftw_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_split_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , ri : * mut f64 , ii : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_execute_dft ( p : fftw_plan , in_ : * mut fftw_complex , out : * mut fftw_complex , ) ; 
} extern "C" {
 pub fn fftw_execute_split_dft ( p : fftw_plan , ri : * mut f64 , ii : * mut f64 , ro : * mut f64 , io : * mut f64 , ) ; 
} extern "C" {
 pub fn fftw_plan_many_dft_r2c ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut f64 , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut fftw_complex , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_r2c ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftw_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_r2c_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftw_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_r2c_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftw_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_r2c_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftw_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_many_dft_c2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut f64 , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_c2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_c2r_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_c2r_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_dft_c2r_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut fftw_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , in_ : * mut f64 , out : * mut fftw_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , in_ : * mut fftw_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_split_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , in_ : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_split_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , ri : * mut f64 , ii : * mut f64 , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , in_ : * mut f64 , out : * mut fftw_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , in_ : * mut fftw_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_split_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , in_ : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_split_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , ri : * mut f64 , ii : * mut f64 , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_execute_dft_r2c ( p : fftw_plan , in_ : * mut f64 , out : * mut fftw_complex , ) ; 
} extern "C" {
 pub fn fftw_execute_dft_c2r ( p : fftw_plan , in_ : * mut fftw_complex , out : * mut f64 , ) ; 
} extern "C" {
 pub fn fftw_execute_split_dft_r2c ( p : fftw_plan , in_ : * mut f64 , ro : * mut f64 , io : * mut f64 , ) ; 
} extern "C" {
 pub fn fftw_execute_split_dft_c2r ( p : fftw_plan , ri : * mut f64 , ii : * mut f64 , out : * mut f64 , ) ; 
} extern "C" {
 pub fn fftw_plan_many_r2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut f64 , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut f64 , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , kind : * const fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_r2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind : * const fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_r2r_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind : fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_r2r_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind0 : fftw_r2r_kind , kind1 : fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_r2r_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind0 : fftw_r2r_kind , kind1 : fftw_r2r_kind , kind2 : fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru_r2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim , in_ : * mut f64 , out : * mut f64 , kind : * const fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_plan_guru64_r2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftw_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftw_iodim64 , in_ : * mut f64 , out : * mut f64 , kind : * const fftw_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftw_plan ; 
} extern "C" {
 pub fn fftw_execute_r2r ( p : fftw_plan , in_ : * mut f64 , out : * mut f64 , ) ; 
} extern "C" {
 pub fn fftw_destroy_plan ( p : fftw_plan , ) ; 
} extern "C" {
 pub fn fftw_forget_wisdom ( ) ; 
} extern "C" {
 pub fn fftw_cleanup ( ) ; 
} extern "C" {
 pub fn fftw_set_timelimit ( t : f64 , ) ; 
} extern "C" {
 pub fn fftw_plan_with_nthreads ( nthreads : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn fftw_init_threads ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_cleanup_threads ( ) ; 
} extern "C" {
 pub fn fftw_make_planner_thread_safe ( ) ; 
} extern "C" {
 pub fn fftw_export_wisdom_to_filename ( filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_export_wisdom_to_file ( output_file : * mut FILE , ) ; 
} extern "C" {
 pub fn fftw_export_wisdom_to_string ( ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fftw_export_wisdom ( write_char : fftw_write_char_func , data : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn fftw_import_system_wisdom ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_import_wisdom_from_filename ( filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_import_wisdom_from_file ( input_file : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_import_wisdom_from_string ( input_string : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_import_wisdom ( read_char : fftw_read_char_func , data : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftw_fprint_plan ( p : fftw_plan , output_file : * mut FILE , ) ; 
} extern "C" {
 pub fn fftw_print_plan ( p : fftw_plan , ) ; 
} extern "C" {
 pub fn fftw_sprint_plan ( p : fftw_plan , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fftw_malloc ( n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn fftw_alloc_real ( n : usize , ) -> * mut f64 ; 
} extern "C" {
 pub fn fftw_alloc_complex ( n : usize , ) -> * mut fftw_complex ; 
} extern "C" {
 pub fn fftw_free ( p : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn fftw_flops ( p : fftw_plan , add : * mut f64 , mul : * mut f64 , fmas : * mut f64 , ) ; 
} extern "C" {
 pub fn fftw_estimate_cost ( p : fftw_plan , ) -> f64 ; 
} extern "C" {
 pub fn fftw_cost ( p : fftw_plan , ) -> f64 ; 
} extern "C" {
 pub fn fftw_alignment_of ( p : * mut f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}fftw_version" ] 
 pub static mut  fftw_version  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}fftw_cc" ] 
 pub static mut  fftw_cc  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}fftw_codelet_optim" ] 
 pub static mut  fftw_codelet_optim  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} pub type fftwf_complex = [ f32 ; 2usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fftwf_plan_s { _unused : [ u8 ; 0 ] } pub type fftwf_plan = * mut fftwf_plan_s ; pub type fftwf_iodim = fftw_iodim_do_not_use_me ; pub type fftwf_iodim64 = fftw_iodim64_do_not_use_me ; pub use self :: fftw_r2r_kind_do_not_use_me as fftwf_r2r_kind ; pub type fftwf_write_char_func = fftw_write_char_func_do_not_use_me ; pub type fftwf_read_char_func = fftw_read_char_func_do_not_use_me ; extern "C" {
 pub fn fftwf_execute ( p : fftwf_plan , ) ; 
} extern "C" {
 pub fn fftwf_plan_dft ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut fftwf_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut fftwf_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut fftwf_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut fftwf_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_many_dft ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut fftwf_complex , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , in_ : * mut fftwf_complex , out : * mut fftwf_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_split_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , ri : * mut f32 , ii : * mut f32 , ro : * mut f32 , io : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , in_ : * mut fftwf_complex , out : * mut fftwf_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_split_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , ri : * mut f32 , ii : * mut f32 , ro : * mut f32 , io : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_execute_dft ( p : fftwf_plan , in_ : * mut fftwf_complex , out : * mut fftwf_complex , ) ; 
} extern "C" {
 pub fn fftwf_execute_split_dft ( p : fftwf_plan , ri : * mut f32 , ii : * mut f32 , ro : * mut f32 , io : * mut f32 , ) ; 
} extern "C" {
 pub fn fftwf_plan_many_dft_r2c ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut f32 , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut fftwf_complex , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_r2c ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut fftwf_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_r2c_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut fftwf_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_r2c_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut fftwf_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_r2c_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut fftwf_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_many_dft_c2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut f32 , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_c2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_c2r_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_c2r_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_dft_c2r_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut fftwf_complex , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , in_ : * mut f32 , out : * mut fftwf_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , in_ : * mut fftwf_complex , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_split_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , in_ : * mut f32 , ro : * mut f32 , io : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_split_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , ri : * mut f32 , ii : * mut f32 , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , in_ : * mut f32 , out : * mut fftwf_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , in_ : * mut fftwf_complex , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_split_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , in_ : * mut f32 , ro : * mut f32 , io : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_split_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , ri : * mut f32 , ii : * mut f32 , out : * mut f32 , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_execute_dft_r2c ( p : fftwf_plan , in_ : * mut f32 , out : * mut fftwf_complex , ) ; 
} extern "C" {
 pub fn fftwf_execute_dft_c2r ( p : fftwf_plan , in_ : * mut fftwf_complex , out : * mut f32 , ) ; 
} extern "C" {
 pub fn fftwf_execute_split_dft_r2c ( p : fftwf_plan , in_ : * mut f32 , ro : * mut f32 , io : * mut f32 , ) ; 
} extern "C" {
 pub fn fftwf_execute_split_dft_c2r ( p : fftwf_plan , ri : * mut f32 , ii : * mut f32 , out : * mut f32 , ) ; 
} extern "C" {
 pub fn fftwf_plan_many_r2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut f32 , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut f32 , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , kind : * const fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_r2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut f32 , kind : * const fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_r2r_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut f32 , kind : fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_r2r_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut f32 , kind0 : fftwf_r2r_kind , kind1 : fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_r2r_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut f32 , out : * mut f32 , kind0 : fftwf_r2r_kind , kind1 : fftwf_r2r_kind , kind2 : fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru_r2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim , in_ : * mut f32 , out : * mut f32 , kind : * const fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_plan_guru64_r2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwf_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwf_iodim64 , in_ : * mut f32 , out : * mut f32 , kind : * const fftwf_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwf_plan ; 
} extern "C" {
 pub fn fftwf_execute_r2r ( p : fftwf_plan , in_ : * mut f32 , out : * mut f32 , ) ; 
} extern "C" {
 pub fn fftwf_destroy_plan ( p : fftwf_plan , ) ; 
} extern "C" {
 pub fn fftwf_forget_wisdom ( ) ; 
} extern "C" {
 pub fn fftwf_cleanup ( ) ; 
} extern "C" {
 pub fn fftwf_set_timelimit ( t : f64 , ) ; 
} extern "C" {
 pub fn fftwf_plan_with_nthreads ( nthreads : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn fftwf_init_threads ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_cleanup_threads ( ) ; 
} extern "C" {
 pub fn fftwf_make_planner_thread_safe ( ) ; 
} extern "C" {
 pub fn fftwf_export_wisdom_to_filename ( filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_export_wisdom_to_file ( output_file : * mut FILE , ) ; 
} extern "C" {
 pub fn fftwf_export_wisdom_to_string ( ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fftwf_export_wisdom ( write_char : fftwf_write_char_func , data : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn fftwf_import_system_wisdom ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_import_wisdom_from_filename ( filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_import_wisdom_from_file ( input_file : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_import_wisdom_from_string ( input_string : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_import_wisdom ( read_char : fftwf_read_char_func , data : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwf_fprint_plan ( p : fftwf_plan , output_file : * mut FILE , ) ; 
} extern "C" {
 pub fn fftwf_print_plan ( p : fftwf_plan , ) ; 
} extern "C" {
 pub fn fftwf_sprint_plan ( p : fftwf_plan , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fftwf_malloc ( n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn fftwf_alloc_real ( n : usize , ) -> * mut f32 ; 
} extern "C" {
 pub fn fftwf_alloc_complex ( n : usize , ) -> * mut fftwf_complex ; 
} extern "C" {
 pub fn fftwf_free ( p : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn fftwf_flops ( p : fftwf_plan , add : * mut f64 , mul : * mut f64 , fmas : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwf_estimate_cost ( p : fftwf_plan , ) -> f64 ; 
} extern "C" {
 pub fn fftwf_cost ( p : fftwf_plan , ) -> f64 ; 
} extern "C" {
 pub fn fftwf_alignment_of ( p : * mut f32 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}fftwf_version" ] 
 pub static mut  fftwf_version  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}fftwf_cc" ] 
 pub static mut  fftwf_cc  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}fftwf_codelet_optim" ] 
 pub static mut  fftwf_codelet_optim  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} pub type fftwl_complex = [ f64 ; 2usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fftwl_plan_s { _unused : [ u8 ; 0 ] } pub type fftwl_plan = * mut fftwl_plan_s ; pub type fftwl_iodim = fftw_iodim_do_not_use_me ; pub type fftwl_iodim64 = fftw_iodim64_do_not_use_me ; pub use self :: fftw_r2r_kind_do_not_use_me as fftwl_r2r_kind ; pub type fftwl_write_char_func = fftw_write_char_func_do_not_use_me ; pub type fftwl_read_char_func = fftw_read_char_func_do_not_use_me ; extern "C" {
 pub fn fftwl_execute ( p : fftwl_plan , ) ; 
} extern "C" {
 pub fn fftwl_plan_dft ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut fftwl_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut fftwl_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut fftwl_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut fftwl_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_many_dft ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut fftwl_complex , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , in_ : * mut fftwl_complex , out : * mut fftwl_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_split_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , ri : * mut f64 , ii : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , in_ : * mut fftwl_complex , out : * mut fftwl_complex , sign : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_split_dft ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , ri : * mut f64 , ii : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_execute_dft ( p : fftwl_plan , in_ : * mut fftwl_complex , out : * mut fftwl_complex , ) ; 
} extern "C" {
 pub fn fftwl_execute_split_dft ( p : fftwl_plan , ri : * mut f64 , ii : * mut f64 , ro : * mut f64 , io : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwl_plan_many_dft_r2c ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut f64 , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut fftwl_complex , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_r2c ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftwl_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_r2c_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftwl_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_r2c_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftwl_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_r2c_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut fftwl_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_many_dft_c2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut f64 , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_c2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_c2r_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_c2r_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_dft_c2r_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut fftwl_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , in_ : * mut f64 , out : * mut fftwl_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , in_ : * mut fftwl_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_split_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , in_ : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_split_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , ri : * mut f64 , ii : * mut f64 , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , in_ : * mut f64 , out : * mut fftwl_complex , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , in_ : * mut fftwl_complex , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_split_dft_r2c ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , in_ : * mut f64 , ro : * mut f64 , io : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_split_dft_c2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , ri : * mut f64 , ii : * mut f64 , out : * mut f64 , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_execute_dft_r2c ( p : fftwl_plan , in_ : * mut f64 , out : * mut fftwl_complex , ) ; 
} extern "C" {
 pub fn fftwl_execute_dft_c2r ( p : fftwl_plan , in_ : * mut fftwl_complex , out : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwl_execute_split_dft_r2c ( p : fftwl_plan , in_ : * mut f64 , ro : * mut f64 , io : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwl_execute_split_dft_c2r ( p : fftwl_plan , ri : * mut f64 , ii : * mut f64 , out : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwl_plan_many_r2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , howmany : :: std :: os :: raw :: c_int , in_ : * mut f64 , inembed : * const :: std :: os :: raw :: c_int , istride : :: std :: os :: raw :: c_int , idist : :: std :: os :: raw :: c_int , out : * mut f64 , onembed : * const :: std :: os :: raw :: c_int , ostride : :: std :: os :: raw :: c_int , odist : :: std :: os :: raw :: c_int , kind : * const fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_r2r ( rank : :: std :: os :: raw :: c_int , n : * const :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind : * const fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_r2r_1d ( n : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind : fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_r2r_2d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind0 : fftwl_r2r_kind , kind1 : fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_r2r_3d ( n0 : :: std :: os :: raw :: c_int , n1 : :: std :: os :: raw :: c_int , n2 : :: std :: os :: raw :: c_int , in_ : * mut f64 , out : * mut f64 , kind0 : fftwl_r2r_kind , kind1 : fftwl_r2r_kind , kind2 : fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru_r2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim , in_ : * mut f64 , out : * mut f64 , kind : * const fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_plan_guru64_r2r ( rank : :: std :: os :: raw :: c_int , dims : * const fftwl_iodim64 , howmany_rank : :: std :: os :: raw :: c_int , howmany_dims : * const fftwl_iodim64 , in_ : * mut f64 , out : * mut f64 , kind : * const fftwl_r2r_kind , flags : :: std :: os :: raw :: c_uint , ) -> fftwl_plan ; 
} extern "C" {
 pub fn fftwl_execute_r2r ( p : fftwl_plan , in_ : * mut f64 , out : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwl_destroy_plan ( p : fftwl_plan , ) ; 
} extern "C" {
 pub fn fftwl_forget_wisdom ( ) ; 
} extern "C" {
 pub fn fftwl_cleanup ( ) ; 
} extern "C" {
 pub fn fftwl_set_timelimit ( t : f64 , ) ; 
} extern "C" {
 pub fn fftwl_plan_with_nthreads ( nthreads : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn fftwl_init_threads ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_cleanup_threads ( ) ; 
} extern "C" {
 pub fn fftwl_make_planner_thread_safe ( ) ; 
} extern "C" {
 pub fn fftwl_export_wisdom_to_filename ( filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_export_wisdom_to_file ( output_file : * mut FILE , ) ; 
} extern "C" {
 pub fn fftwl_export_wisdom_to_string ( ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fftwl_export_wisdom ( write_char : fftwl_write_char_func , data : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn fftwl_import_system_wisdom ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_import_wisdom_from_filename ( filename : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_import_wisdom_from_file ( input_file : * mut FILE , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_import_wisdom_from_string ( input_string : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_import_wisdom ( read_char : fftwl_read_char_func , data : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn fftwl_fprint_plan ( p : fftwl_plan , output_file : * mut FILE , ) ; 
} extern "C" {
 pub fn fftwl_print_plan ( p : fftwl_plan , ) ; 
} extern "C" {
 pub fn fftwl_sprint_plan ( p : fftwl_plan , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn fftwl_malloc ( n : usize , ) -> * mut :: std :: os :: raw :: c_void ; 
} extern "C" {
 pub fn fftwl_alloc_real ( n : usize , ) -> * mut f64 ; 
} extern "C" {
 pub fn fftwl_alloc_complex ( n : usize , ) -> * mut fftwl_complex ; 
} extern "C" {
 pub fn fftwl_free ( p : * mut :: std :: os :: raw :: c_void , ) ; 
} extern "C" {
 pub fn fftwl_flops ( p : fftwl_plan , add : * mut f64 , mul : * mut f64 , fmas : * mut f64 , ) ; 
} extern "C" {
 pub fn fftwl_estimate_cost ( p : fftwl_plan , ) -> f64 ; 
} extern "C" {
 pub fn fftwl_cost ( p : fftwl_plan , ) -> f64 ; 
} extern "C" {
 pub fn fftwl_alignment_of ( p : * mut f64 , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}fftwl_version" ] 
 pub static mut  fftwl_version  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}fftwl_cc" ] 
 pub static mut  fftwl_cc  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}fftwl_codelet_optim" ] 
 pub static mut  fftwl_codelet_optim  :  [ :: std :: os :: raw :: c_char ; 0usize ] ;
} pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; }