/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __llvm__: ::std::os::raw::c_uchar = 1;
pub const __clang__: ::std::os::raw::c_uchar = 1;
pub const __clang_major__: ::std::os::raw::c_uchar = 3;
pub const __clang_minor__: ::std::os::raw::c_uchar = 8;
pub const __clang_patchlevel__: ::std::os::raw::c_uchar = 1;
pub const __GNUC_MINOR__: ::std::os::raw::c_uchar = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uchar = 1;
pub const __GNUC__: ::std::os::raw::c_uchar = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_ushort = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uchar = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uchar = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uchar = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uchar = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uchar = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uchar = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uchar = 1;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uchar = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uchar = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_ushort = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_ushort = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_ushort = 1234;
// pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uchar = 1;
pub const _LP64: ::std::os::raw::c_uchar = 1;
pub const __LP64__: ::std::os::raw::c_uchar = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uchar = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uchar = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_char = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_char = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_char = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uchar = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uchar = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uchar = 16;
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __SIZE_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uchar = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uchar = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uchar = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uchar = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uchar = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_char = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_char = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uchar = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uchar = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_ushort = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_short = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_short = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uchar = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uchar = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_ushort = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_short = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_short = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uchar = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uchar = 1;
pub const __UINT8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_FAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uchar = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uchar = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __amd64__: ::std::os::raw::c_uchar = 1;
pub const __amd64: ::std::os::raw::c_uchar = 1;
pub const __x86_64: ::std::os::raw::c_uchar = 1;
pub const __x86_64__: ::std::os::raw::c_uchar = 1;
pub const __k8: ::std::os::raw::c_uchar = 1;
pub const __k8__: ::std::os::raw::c_uchar = 1;
pub const __tune_k8__: ::std::os::raw::c_uchar = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uchar = 1;
pub const __FXSR__: ::std::os::raw::c_uchar = 1;
pub const __SSE2__: ::std::os::raw::c_uchar = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uchar = 1;
pub const __SSE__: ::std::os::raw::c_uchar = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uchar = 1;
pub const __MMX__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uchar = 1;
pub const unix: ::std::os::raw::c_uchar = 1;
pub const __unix: ::std::os::raw::c_uchar = 1;
pub const __unix__: ::std::os::raw::c_uchar = 1;
pub const linux: ::std::os::raw::c_uchar = 1;
pub const __linux: ::std::os::raw::c_uchar = 1;
pub const __linux__: ::std::os::raw::c_uchar = 1;
pub const __gnu_linux__: ::std::os::raw::c_uchar = 1;
pub const __ELF__: ::std::os::raw::c_uchar = 1;
pub const __STDC__: ::std::os::raw::c_uchar = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uchar = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uchar = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uchar = 1;
pub const _STDIO_H: ::std::os::raw::c_uchar = 1;
pub const _FEATURES_H: ::std::os::raw::c_uchar = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _BSD_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _SVID_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uchar = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uchar = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_MISC: ::std::os::raw::c_uchar = 1;
pub const __USE_BSD: ::std::os::raw::c_uchar = 1;
pub const __USE_SVID: ::std::os::raw::c_uchar = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uchar = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uchar = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201103;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uchar = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uchar = 6;
pub const __GLIBC__: ::std::os::raw::c_uchar = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uchar = 19;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uchar = 1;
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uchar = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uchar = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uchar = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uchar = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const __FILE_defined: ::std::os::raw::c_uchar = 1;
pub const ____FILE_defined: ::std::os::raw::c_uchar = 1;
pub const _G_config_h: ::std::os::raw::c_uchar = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uchar = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uchar = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uchar = 1;
pub const EOF: ::std::os::raw::c_char = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uchar = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uchar = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uchar = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uchar = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uchar = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uchar = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uchar = 64;
pub const _IOS_BIN: ::std::os::raw::c_uchar = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uchar = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uchar = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uchar = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uchar = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uchar = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uchar = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uchar = 64;
pub const _IO_LINKED: ::std::os::raw::c_uchar = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_ushort = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_ushort = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_ushort = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_ushort = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_ushort = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_ushort = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_ushort = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uchar = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uchar = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uchar = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uchar = 1;
pub const _IO_LEFT: ::std::os::raw::c_uchar = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uchar = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uchar = 8;
pub const _IO_DEC: ::std::os::raw::c_uchar = 16;
pub const _IO_OCT: ::std::os::raw::c_uchar = 32;
pub const _IO_HEX: ::std::os::raw::c_uchar = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uchar = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_ushort = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_ushort = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_ushort = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_ushort = 2048;
pub const _IO_FIXED: ::std::os::raw::c_ushort = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_STDIO: ::std::os::raw::c_ushort = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_ushort = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uchar = 0;
pub const _IOLBF: ::std::os::raw::c_uchar = 1;
pub const _IONBF: ::std::os::raw::c_uchar = 2;
pub const BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const SEEK_SET: ::std::os::raw::c_uchar = 0;
pub const SEEK_CUR: ::std::os::raw::c_uchar = 1;
pub const SEEK_END: ::std::os::raw::c_uchar = 2;
pub const L_tmpnam: ::std::os::raw::c_uchar = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_ushort = 4096;
pub const L_ctermid: ::std::os::raw::c_uchar = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uchar = 16;
pub const _MATH_H: ::std::os::raw::c_uchar = 1;
pub const _MATH_H_MATHDEF: ::std::os::raw::c_uchar = 1;
pub const FP_ILOGB0: ::std::os::raw::c_int = -2147483648;
pub const FP_ILOGBNAN: ::std::os::raw::c_int = -2147483648;
pub const __MATH_DECLARE_LDOUBLE: ::std::os::raw::c_uchar = 1;
pub const FP_NAN: ::std::os::raw::c_uchar = 0;
pub const FP_INFINITE: ::std::os::raw::c_uchar = 1;
pub const FP_ZERO: ::std::os::raw::c_uchar = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uchar = 3;
pub const FP_NORMAL: ::std::os::raw::c_uchar = 4;
pub const MATH_ERRNO: ::std::os::raw::c_uchar = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uchar = 2;
pub const math_errhandling: ::std::os::raw::c_uchar = 3;
pub const DOMAIN: ::std::os::raw::c_uchar = 1;
pub const SING: ::std::os::raw::c_uchar = 2;
pub const OVERFLOW: ::std::os::raw::c_uchar = 3;
pub const UNDERFLOW: ::std::os::raw::c_uchar = 4;
pub const TLOSS: ::std::os::raw::c_uchar = 5;
pub const PLOSS: ::std::os::raw::c_uchar = 6;
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uchar = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uchar = 16;
pub const SCHAR_MAX: ::std::os::raw::c_uchar = 127;
pub const SHRT_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SCHAR_MIN: ::std::os::raw::c_char = -128;
pub const SHRT_MIN: ::std::os::raw::c_short = -32768;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UCHAR_MAX: ::std::os::raw::c_uchar = 255;
pub const USHRT_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const ULONG_MAX: ::std::os::raw::c_char = -1;
pub const CHAR_BIT: ::std::os::raw::c_uchar = 8;
pub const CHAR_MIN: ::std::os::raw::c_char = -128;
pub const CHAR_MAX: ::std::os::raw::c_uchar = 127;
pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ULLONG_MAX: ::std::os::raw::c_char = -1;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uchar = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uchar = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_ushort = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uchar = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uchar = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uchar = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uchar = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uchar = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_ushort = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_ushort = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_ushort = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_ushort = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_ushort = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uchar = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uchar = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_ushort = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uchar = 127;
pub const MAX_CANON: ::std::os::raw::c_uchar = 255;
pub const MAX_INPUT: ::std::os::raw::c_uchar = 255;
pub const NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const PATH_MAX: ::std::os::raw::c_ushort = 4096;
pub const PIPE_BUF: ::std::os::raw::c_ushort = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uchar = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_ushort = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uchar = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uchar = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uchar = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uchar = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_ushort = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uchar = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_ushort = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uchar = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_ushort = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SSIZE_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uchar = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uchar = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_ushort = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uchar = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_ushort = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_ushort = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uchar = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_ushort = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uchar = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_ushort = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uchar = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uchar = 32;
pub const LINE_MAX: ::std::os::raw::c_ushort = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_ushort = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_ushort = 32767;
pub const cudaHostAllocDefault: ::std::os::raw::c_uchar = 0;
pub const cudaHostAllocPortable: ::std::os::raw::c_uchar = 1;
pub const cudaHostAllocMapped: ::std::os::raw::c_uchar = 2;
pub const cudaHostAllocWriteCombined: ::std::os::raw::c_uchar = 4;
pub const cudaHostRegisterDefault: ::std::os::raw::c_uchar = 0;
pub const cudaHostRegisterPortable: ::std::os::raw::c_uchar = 1;
pub const cudaHostRegisterMapped: ::std::os::raw::c_uchar = 2;
pub const cudaHostRegisterIoMemory: ::std::os::raw::c_uchar = 4;
pub const cudaPeerAccessDefault: ::std::os::raw::c_uchar = 0;
pub const cudaStreamDefault: ::std::os::raw::c_uchar = 0;
pub const cudaStreamNonBlocking: ::std::os::raw::c_uchar = 1;
pub const cudaEventDefault: ::std::os::raw::c_uchar = 0;
pub const cudaEventBlockingSync: ::std::os::raw::c_uchar = 1;
pub const cudaEventDisableTiming: ::std::os::raw::c_uchar = 2;
pub const cudaEventInterprocess: ::std::os::raw::c_uchar = 4;
pub const cudaDeviceScheduleAuto: ::std::os::raw::c_uchar = 0;
pub const cudaDeviceScheduleSpin: ::std::os::raw::c_uchar = 1;
pub const cudaDeviceScheduleYield: ::std::os::raw::c_uchar = 2;
pub const cudaDeviceScheduleBlockingSync: ::std::os::raw::c_uchar = 4;
pub const cudaDeviceBlockingSync: ::std::os::raw::c_uchar = 4;
pub const cudaDeviceScheduleMask: ::std::os::raw::c_uchar = 7;
pub const cudaDeviceMapHost: ::std::os::raw::c_uchar = 8;
pub const cudaDeviceLmemResizeToMax: ::std::os::raw::c_uchar = 16;
pub const cudaDeviceMask: ::std::os::raw::c_uchar = 31;
pub const cudaArrayDefault: ::std::os::raw::c_uchar = 0;
pub const cudaArrayLayered: ::std::os::raw::c_uchar = 1;
pub const cudaArraySurfaceLoadStore: ::std::os::raw::c_uchar = 2;
pub const cudaArrayCubemap: ::std::os::raw::c_uchar = 4;
pub const cudaArrayTextureGather: ::std::os::raw::c_uchar = 8;
pub const cudaIpcMemLazyEnablePeerAccess: ::std::os::raw::c_uchar = 1;
pub const cudaMemAttachGlobal: ::std::os::raw::c_uchar = 1;
pub const cudaMemAttachHost: ::std::os::raw::c_uchar = 2;
pub const cudaMemAttachSingle: ::std::os::raw::c_uchar = 4;
pub const cudaOccupancyDefault: ::std::os::raw::c_uchar = 0;
pub const cudaOccupancyDisableCachingOverride: ::std::os::raw::c_uchar = 1;
pub const CUDA_IPC_HANDLE_SIZE: ::std::os::raw::c_uchar = 64;
pub const cudaSurfaceType1D: ::std::os::raw::c_uchar = 1;
pub const cudaSurfaceType2D: ::std::os::raw::c_uchar = 2;
pub const cudaSurfaceType3D: ::std::os::raw::c_uchar = 3;
pub const cudaSurfaceTypeCubemap: ::std::os::raw::c_uchar = 12;
pub const cudaSurfaceType1DLayered: ::std::os::raw::c_uchar = 241;
pub const cudaSurfaceType2DLayered: ::std::os::raw::c_uchar = 242;
pub const cudaSurfaceTypeCubemapLayered: ::std::os::raw::c_uchar = 252;
pub const cudaTextureType1D: ::std::os::raw::c_uchar = 1;
pub const cudaTextureType2D: ::std::os::raw::c_uchar = 2;
pub const cudaTextureType3D: ::std::os::raw::c_uchar = 3;
pub const cudaTextureTypeCubemap: ::std::os::raw::c_uchar = 12;
pub const cudaTextureType1DLayered: ::std::os::raw::c_uchar = 241;
pub const cudaTextureType2DLayered: ::std::os::raw::c_uchar = 242;
pub const cudaTextureTypeCubemapLayered: ::std::os::raw::c_uchar = 252;
pub const MAX_CUFFT_ERROR: ::std::os::raw::c_uchar = 16;
pub const CUFFT_FORWARD: ::std::os::raw::c_char = -1;
pub const CUFFT_INVERSE: ::std::os::raw::c_uchar = 1;
pub const MAX_SHIM_RANK: ::std::os::raw::c_uchar = 3;
pub const FFTW_FORWARD: ::std::os::raw::c_char = -1;
pub const FFTW_INVERSE: ::std::os::raw::c_uchar = 1;
pub const FFTW_BACKWARD: ::std::os::raw::c_uchar = 1;
pub const FFTW_ESTIMATE: ::std::os::raw::c_uchar = 1;
pub const FFTW_MEASURE: ::std::os::raw::c_uchar = 2;
pub const FFTW_PATIENT: ::std::os::raw::c_uchar = 3;
pub const FFTW_EXHAUSTIVE: ::std::os::raw::c_uchar = 4;
pub const FFTW_WISDOM_ONLY: ::std::os::raw::c_uchar = 5;
pub const FFTW_DESTROY_INPUT: ::std::os::raw::c_uchar = 8;
pub const FFTW_PRESERVE_INPUT: ::std::os::raw::c_uchar = 12;
pub const FFTW_UNALIGNED: ::std::os::raw::c_uchar = 16;
pub type size_t = usize;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
pub type float_t = f32;
pub type double_t = f64;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed2 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _LIB_VERSION_TYPE {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
impl ::std::default::Default for exception {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaRoundMode {
    cudaRoundNearest = 0,
    cudaRoundZero = 1,
    cudaRoundPosInf = 2,
    cudaRoundMinInf = 3,
}
pub type ptrdiff_t = isize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaError {
    cudaSuccess = 0,
    cudaErrorMissingConfiguration = 1,
    cudaErrorMemoryAllocation = 2,
    cudaErrorInitializationError = 3,
    cudaErrorLaunchFailure = 4,
    cudaErrorPriorLaunchFailure = 5,
    cudaErrorLaunchTimeout = 6,
    cudaErrorLaunchOutOfResources = 7,
    cudaErrorInvalidDeviceFunction = 8,
    cudaErrorInvalidConfiguration = 9,
    cudaErrorInvalidDevice = 10,
    cudaErrorInvalidValue = 11,
    cudaErrorInvalidPitchValue = 12,
    cudaErrorInvalidSymbol = 13,
    cudaErrorMapBufferObjectFailed = 14,
    cudaErrorUnmapBufferObjectFailed = 15,
    cudaErrorInvalidHostPointer = 16,
    cudaErrorInvalidDevicePointer = 17,
    cudaErrorInvalidTexture = 18,
    cudaErrorInvalidTextureBinding = 19,
    cudaErrorInvalidChannelDescriptor = 20,
    cudaErrorInvalidMemcpyDirection = 21,
    cudaErrorAddressOfConstant = 22,
    cudaErrorTextureFetchFailed = 23,
    cudaErrorTextureNotBound = 24,
    cudaErrorSynchronizationError = 25,
    cudaErrorInvalidFilterSetting = 26,
    cudaErrorInvalidNormSetting = 27,
    cudaErrorMixedDeviceExecution = 28,
    cudaErrorCudartUnloading = 29,
    cudaErrorUnknown = 30,
    cudaErrorNotYetImplemented = 31,
    cudaErrorMemoryValueTooLarge = 32,
    cudaErrorInvalidResourceHandle = 33,
    cudaErrorNotReady = 34,
    cudaErrorInsufficientDriver = 35,
    cudaErrorSetOnActiveProcess = 36,
    cudaErrorInvalidSurface = 37,
    cudaErrorNoDevice = 38,
    cudaErrorECCUncorrectable = 39,
    cudaErrorSharedObjectSymbolNotFound = 40,
    cudaErrorSharedObjectInitFailed = 41,
    cudaErrorUnsupportedLimit = 42,
    cudaErrorDuplicateVariableName = 43,
    cudaErrorDuplicateTextureName = 44,
    cudaErrorDuplicateSurfaceName = 45,
    cudaErrorDevicesUnavailable = 46,
    cudaErrorInvalidKernelImage = 47,
    cudaErrorNoKernelImageForDevice = 48,
    cudaErrorIncompatibleDriverContext = 49,
    cudaErrorPeerAccessAlreadyEnabled = 50,
    cudaErrorPeerAccessNotEnabled = 51,
    cudaErrorDeviceAlreadyInUse = 54,
    cudaErrorProfilerDisabled = 55,
    cudaErrorProfilerNotInitialized = 56,
    cudaErrorProfilerAlreadyStarted = 57,
    cudaErrorProfilerAlreadyStopped = 58,
    cudaErrorAssert = 59,
    cudaErrorTooManyPeers = 60,
    cudaErrorHostMemoryAlreadyRegistered = 61,
    cudaErrorHostMemoryNotRegistered = 62,
    cudaErrorOperatingSystem = 63,
    cudaErrorPeerAccessUnsupported = 64,
    cudaErrorLaunchMaxDepthExceeded = 65,
    cudaErrorLaunchFileScopedTex = 66,
    cudaErrorLaunchFileScopedSurf = 67,
    cudaErrorSyncDepthExceeded = 68,
    cudaErrorLaunchPendingCountExceeded = 69,
    cudaErrorNotPermitted = 70,
    cudaErrorNotSupported = 71,
    cudaErrorHardwareStackError = 72,
    cudaErrorIllegalInstruction = 73,
    cudaErrorMisalignedAddress = 74,
    cudaErrorInvalidAddressSpace = 75,
    cudaErrorInvalidPc = 76,
    cudaErrorIllegalAddress = 77,
    cudaErrorInvalidPtx = 78,
    cudaErrorInvalidGraphicsContext = 79,
    cudaErrorStartupFailure = 127,
    cudaErrorApiFailureBase = 10000,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaChannelFormatKind {
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaChannelFormatDesc {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub f: cudaChannelFormatKind,
}
impl ::std::default::Default for cudaChannelFormatDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum cudaArray { }
pub type cudaArray_t = *mut cudaArray;
pub type cudaArray_const_t = *const cudaArray;
pub enum cudaMipmappedArray { }
pub type cudaMipmappedArray_t = *mut cudaMipmappedArray;
pub type cudaMipmappedArray_const_t = *const cudaMipmappedArray;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaMemoryType { cudaMemoryTypeHost = 1, cudaMemoryTypeDevice = 2, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaMemcpyKind {
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaPitchedPtr {
    pub ptr: *mut ::std::os::raw::c_void,
    pub pitch: size_t,
    pub xsize: size_t,
    pub ysize: size_t,
}
impl ::std::default::Default for cudaPitchedPtr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaExtent {
    pub width: size_t,
    pub height: size_t,
    pub depth: size_t,
}
impl ::std::default::Default for cudaExtent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaPos {
    pub x: size_t,
    pub y: size_t,
    pub z: size_t,
}
impl ::std::default::Default for cudaPos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaMemcpy3DParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub extent: cudaExtent,
    pub kind: cudaMemcpyKind,
}
impl ::std::default::Default for cudaMemcpy3DParms {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaMemcpy3DPeerParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub srcDevice: ::std::os::raw::c_int,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub dstDevice: ::std::os::raw::c_int,
    pub extent: cudaExtent,
}
impl ::std::default::Default for cudaMemcpy3DPeerParms {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum cudaGraphicsResource { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaGraphicsRegisterFlags {
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaGraphicsMapFlags {
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaGraphicsCubeFace {
    cudaGraphicsCubeFacePositiveX = 0,
    cudaGraphicsCubeFaceNegativeX = 1,
    cudaGraphicsCubeFacePositiveY = 2,
    cudaGraphicsCubeFaceNegativeY = 3,
    cudaGraphicsCubeFacePositiveZ = 4,
    cudaGraphicsCubeFaceNegativeZ = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaResourceType {
    cudaResourceTypeArray = 0,
    cudaResourceTypeMipmappedArray = 1,
    cudaResourceTypeLinear = 2,
    cudaResourceTypePitch2D = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaResourceViewFormat {
    cudaResViewFormatNone = 0,
    cudaResViewFormatUnsignedChar1 = 1,
    cudaResViewFormatUnsignedChar2 = 2,
    cudaResViewFormatUnsignedChar4 = 3,
    cudaResViewFormatSignedChar1 = 4,
    cudaResViewFormatSignedChar2 = 5,
    cudaResViewFormatSignedChar4 = 6,
    cudaResViewFormatUnsignedShort1 = 7,
    cudaResViewFormatUnsignedShort2 = 8,
    cudaResViewFormatUnsignedShort4 = 9,
    cudaResViewFormatSignedShort1 = 10,
    cudaResViewFormatSignedShort2 = 11,
    cudaResViewFormatSignedShort4 = 12,
    cudaResViewFormatUnsignedInt1 = 13,
    cudaResViewFormatUnsignedInt2 = 14,
    cudaResViewFormatUnsignedInt4 = 15,
    cudaResViewFormatSignedInt1 = 16,
    cudaResViewFormatSignedInt2 = 17,
    cudaResViewFormatSignedInt4 = 18,
    cudaResViewFormatHalf1 = 19,
    cudaResViewFormatHalf2 = 20,
    cudaResViewFormatHalf4 = 21,
    cudaResViewFormatFloat1 = 22,
    cudaResViewFormatFloat2 = 23,
    cudaResViewFormatFloat4 = 24,
    cudaResViewFormatUnsignedBlockCompressed1 = 25,
    cudaResViewFormatUnsignedBlockCompressed2 = 26,
    cudaResViewFormatUnsignedBlockCompressed3 = 27,
    cudaResViewFormatUnsignedBlockCompressed4 = 28,
    cudaResViewFormatSignedBlockCompressed4 = 29,
    cudaResViewFormatUnsignedBlockCompressed5 = 30,
    cudaResViewFormatSignedBlockCompressed5 = 31,
    cudaResViewFormatUnsignedBlockCompressed6H = 32,
    cudaResViewFormatSignedBlockCompressed6H = 33,
    cudaResViewFormatUnsignedBlockCompressed7 = 34,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaResourceDesc {
    pub resType: cudaResourceType,
    pub res: Union_Unnamed3,
}
impl ::std::default::Default for cudaResourceDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed3 {
    pub unsafe fn array(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mipmap(&mut self) -> *mut Struct_Unnamed5 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn linear(&mut self) -> *mut Struct_Unnamed6 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pitch2D(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub array: cudaArray_t,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub mipmap: cudaMipmappedArray_t,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed6 {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub desc: cudaChannelFormatDesc,
    pub sizeInBytes: size_t,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed7 {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub desc: cudaChannelFormatDesc,
    pub width: size_t,
    pub height: size_t,
    pub pitchInBytes: size_t,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaResourceViewDesc {
    pub format: cudaResourceViewFormat,
    pub width: size_t,
    pub height: size_t,
    pub depth: size_t,
    pub firstMipmapLevel: ::std::os::raw::c_uint,
    pub lastMipmapLevel: ::std::os::raw::c_uint,
    pub firstLayer: ::std::os::raw::c_uint,
    pub lastLayer: ::std::os::raw::c_uint,
}
impl ::std::default::Default for cudaResourceViewDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaPointerAttributes {
    pub memoryType: cudaMemoryType,
    pub device: ::std::os::raw::c_int,
    pub devicePointer: *mut ::std::os::raw::c_void,
    pub hostPointer: *mut ::std::os::raw::c_void,
    pub isManaged: ::std::os::raw::c_int,
}
impl ::std::default::Default for cudaPointerAttributes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaFuncAttributes {
    pub sharedSizeBytes: size_t,
    pub constSizeBytes: size_t,
    pub localSizeBytes: size_t,
    pub maxThreadsPerBlock: ::std::os::raw::c_int,
    pub numRegs: ::std::os::raw::c_int,
    pub ptxVersion: ::std::os::raw::c_int,
    pub binaryVersion: ::std::os::raw::c_int,
    pub cacheModeCA: ::std::os::raw::c_int,
}
impl ::std::default::Default for cudaFuncAttributes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaFuncCache {
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaSharedMemConfig {
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaComputeMode {
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaLimit {
    cudaLimitStackSize = 0,
    cudaLimitPrintfFifoSize = 1,
    cudaLimitMallocHeapSize = 2,
    cudaLimitDevRuntimeSyncDepth = 3,
    cudaLimitDevRuntimePendingLaunchCount = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaOutputMode { cudaKeyValuePair = 0, cudaCSV = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaDeviceAttr {
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
}
#[repr(C)]
#[derive(Copy)]
pub struct cudaDeviceProp {
    pub name: [::std::os::raw::c_char; 256usize],
    pub totalGlobalMem: size_t,
    pub sharedMemPerBlock: size_t,
    pub regsPerBlock: ::std::os::raw::c_int,
    pub warpSize: ::std::os::raw::c_int,
    pub memPitch: size_t,
    pub maxThreadsPerBlock: ::std::os::raw::c_int,
    pub maxThreadsDim: [::std::os::raw::c_int; 3usize],
    pub maxGridSize: [::std::os::raw::c_int; 3usize],
    pub clockRate: ::std::os::raw::c_int,
    pub totalConstMem: size_t,
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub textureAlignment: size_t,
    pub texturePitchAlignment: size_t,
    pub deviceOverlap: ::std::os::raw::c_int,
    pub multiProcessorCount: ::std::os::raw::c_int,
    pub kernelExecTimeoutEnabled: ::std::os::raw::c_int,
    pub integrated: ::std::os::raw::c_int,
    pub canMapHostMemory: ::std::os::raw::c_int,
    pub computeMode: ::std::os::raw::c_int,
    pub maxTexture1D: ::std::os::raw::c_int,
    pub maxTexture1DMipmap: ::std::os::raw::c_int,
    pub maxTexture1DLinear: ::std::os::raw::c_int,
    pub maxTexture2D: [::std::os::raw::c_int; 2usize],
    pub maxTexture2DMipmap: [::std::os::raw::c_int; 2usize],
    pub maxTexture2DLinear: [::std::os::raw::c_int; 3usize],
    pub maxTexture2DGather: [::std::os::raw::c_int; 2usize],
    pub maxTexture3D: [::std::os::raw::c_int; 3usize],
    pub maxTexture3DAlt: [::std::os::raw::c_int; 3usize],
    pub maxTextureCubemap: ::std::os::raw::c_int,
    pub maxTexture1DLayered: [::std::os::raw::c_int; 2usize],
    pub maxTexture2DLayered: [::std::os::raw::c_int; 3usize],
    pub maxTextureCubemapLayered: [::std::os::raw::c_int; 2usize],
    pub maxSurface1D: ::std::os::raw::c_int,
    pub maxSurface2D: [::std::os::raw::c_int; 2usize],
    pub maxSurface3D: [::std::os::raw::c_int; 3usize],
    pub maxSurface1DLayered: [::std::os::raw::c_int; 2usize],
    pub maxSurface2DLayered: [::std::os::raw::c_int; 3usize],
    pub maxSurfaceCubemap: ::std::os::raw::c_int,
    pub maxSurfaceCubemapLayered: [::std::os::raw::c_int; 2usize],
    pub surfaceAlignment: size_t,
    pub concurrentKernels: ::std::os::raw::c_int,
    pub ECCEnabled: ::std::os::raw::c_int,
    pub pciBusID: ::std::os::raw::c_int,
    pub pciDeviceID: ::std::os::raw::c_int,
    pub pciDomainID: ::std::os::raw::c_int,
    pub tccDriver: ::std::os::raw::c_int,
    pub asyncEngineCount: ::std::os::raw::c_int,
    pub unifiedAddressing: ::std::os::raw::c_int,
    pub memoryClockRate: ::std::os::raw::c_int,
    pub memoryBusWidth: ::std::os::raw::c_int,
    pub l2CacheSize: ::std::os::raw::c_int,
    pub maxThreadsPerMultiProcessor: ::std::os::raw::c_int,
    pub streamPrioritiesSupported: ::std::os::raw::c_int,
    pub globalL1CacheSupported: ::std::os::raw::c_int,
    pub localL1CacheSupported: ::std::os::raw::c_int,
    pub sharedMemPerMultiprocessor: size_t,
    pub regsPerMultiprocessor: ::std::os::raw::c_int,
    pub managedMemory: ::std::os::raw::c_int,
    pub isMultiGpuBoard: ::std::os::raw::c_int,
    pub multiGpuBoardGroupID: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for cudaDeviceProp {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for cudaDeviceProp {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct cudaIpcEventHandle_st {
    pub reserved: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for cudaIpcEventHandle_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for cudaIpcEventHandle_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cudaIpcEventHandle_t = cudaIpcEventHandle_st;
#[repr(C)]
#[derive(Copy)]
pub struct cudaIpcMemHandle_st {
    pub reserved: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for cudaIpcMemHandle_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for cudaIpcMemHandle_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cudaIpcMemHandle_t = cudaIpcMemHandle_st;
pub type cudaError_t = cudaError;
pub enum CUstream_st { }
pub type cudaStream_t = *mut CUstream_st;
pub enum CUevent_st { }
pub type cudaEvent_t = *mut CUevent_st;
pub type cudaGraphicsResource_t = *mut cudaGraphicsResource;
pub enum CUuuid_st { }
pub type cudaUUID_t = CUuuid_st;
pub type cudaOutputMode_t = cudaOutputMode;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaSurfaceBoundaryMode {
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaSurfaceFormatMode {
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct surfaceReference {
    pub channelDesc: cudaChannelFormatDesc,
}
impl ::std::default::Default for surfaceReference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cudaSurfaceObject_t = ::std::os::raw::c_ulonglong;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaTextureAddressMode {
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaTextureFilterMode {
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cudaTextureReadMode {
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct textureReference {
    pub normalized: ::std::os::raw::c_int,
    pub filterMode: cudaTextureFilterMode,
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub channelDesc: cudaChannelFormatDesc,
    pub sRGB: ::std::os::raw::c_int,
    pub maxAnisotropy: ::std::os::raw::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
    pub __cudaReserved: [::std::os::raw::c_int; 15usize],
}
impl ::std::default::Default for textureReference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cudaTextureDesc {
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub filterMode: cudaTextureFilterMode,
    pub readMode: cudaTextureReadMode,
    pub sRGB: ::std::os::raw::c_int,
    pub normalizedCoords: ::std::os::raw::c_int,
    pub maxAnisotropy: ::std::os::raw::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
}
impl ::std::default::Default for cudaTextureDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cudaTextureObject_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct char1 {
    pub x: ::std::os::raw::c_char,
}
impl ::std::default::Default for char1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uchar1 {
    pub x: ::std::os::raw::c_uchar,
}
impl ::std::default::Default for uchar1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct char2 {
    pub x: ::std::os::raw::c_char,
    pub y: ::std::os::raw::c_char,
}
impl ::std::default::Default for char2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uchar2 {
    pub x: ::std::os::raw::c_uchar,
    pub y: ::std::os::raw::c_uchar,
}
impl ::std::default::Default for uchar2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct char3 {
    pub x: ::std::os::raw::c_char,
    pub y: ::std::os::raw::c_char,
    pub z: ::std::os::raw::c_char,
}
impl ::std::default::Default for char3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uchar3 {
    pub x: ::std::os::raw::c_uchar,
    pub y: ::std::os::raw::c_uchar,
    pub z: ::std::os::raw::c_uchar,
}
impl ::std::default::Default for uchar3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct char4 {
    pub x: ::std::os::raw::c_char,
    pub y: ::std::os::raw::c_char,
    pub z: ::std::os::raw::c_char,
    pub w: ::std::os::raw::c_char,
}
impl ::std::default::Default for char4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uchar4 {
    pub x: ::std::os::raw::c_uchar,
    pub y: ::std::os::raw::c_uchar,
    pub z: ::std::os::raw::c_uchar,
    pub w: ::std::os::raw::c_uchar,
}
impl ::std::default::Default for uchar4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct short1 {
    pub x: ::std::os::raw::c_short,
}
impl ::std::default::Default for short1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ushort1 {
    pub x: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for ushort1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct short2 {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
impl ::std::default::Default for short2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ushort2 {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for ushort2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct short3 {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub z: ::std::os::raw::c_short,
}
impl ::std::default::Default for short3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ushort3 {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub z: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for ushort3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct short4 {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub z: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_short,
}
impl ::std::default::Default for short4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ushort4 {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub z: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for ushort4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct int1 {
    pub x: ::std::os::raw::c_int,
}
impl ::std::default::Default for int1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uint1 {
    pub x: ::std::os::raw::c_uint,
}
impl ::std::default::Default for uint1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct int2 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::default::Default for int2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uint2 {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
}
impl ::std::default::Default for uint2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct int3 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
}
impl ::std::default::Default for int3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uint3 {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub z: ::std::os::raw::c_uint,
}
impl ::std::default::Default for uint3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct int4 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
}
impl ::std::default::Default for int4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uint4 {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub z: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
}
impl ::std::default::Default for uint4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct long1 {
    pub x: ::std::os::raw::c_long,
}
impl ::std::default::Default for long1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulong1 {
    pub x: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for ulong1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct long2 {
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
}
impl ::std::default::Default for long2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulong2 {
    pub x: ::std::os::raw::c_ulong,
    pub y: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for ulong2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct long3 {
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
    pub z: ::std::os::raw::c_long,
}
impl ::std::default::Default for long3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulong3 {
    pub x: ::std::os::raw::c_ulong,
    pub y: ::std::os::raw::c_ulong,
    pub z: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for ulong3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct long4 {
    pub x: ::std::os::raw::c_long,
    pub y: ::std::os::raw::c_long,
    pub z: ::std::os::raw::c_long,
    pub w: ::std::os::raw::c_long,
}
impl ::std::default::Default for long4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulong4 {
    pub x: ::std::os::raw::c_ulong,
    pub y: ::std::os::raw::c_ulong,
    pub z: ::std::os::raw::c_ulong,
    pub w: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for ulong4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct float1 {
    pub x: f32,
}
impl ::std::default::Default for float1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct float2 {
    pub x: f32,
    pub y: f32,
}
impl ::std::default::Default for float2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct float3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
impl ::std::default::Default for float3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct float4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
impl ::std::default::Default for float4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct longlong1 {
    pub x: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for longlong1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulonglong1 {
    pub x: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for ulonglong1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct longlong2 {
    pub x: ::std::os::raw::c_longlong,
    pub y: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for longlong2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulonglong2 {
    pub x: ::std::os::raw::c_ulonglong,
    pub y: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for ulonglong2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct longlong3 {
    pub x: ::std::os::raw::c_longlong,
    pub y: ::std::os::raw::c_longlong,
    pub z: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for longlong3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulonglong3 {
    pub x: ::std::os::raw::c_ulonglong,
    pub y: ::std::os::raw::c_ulonglong,
    pub z: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for ulonglong3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct longlong4 {
    pub x: ::std::os::raw::c_longlong,
    pub y: ::std::os::raw::c_longlong,
    pub z: ::std::os::raw::c_longlong,
    pub w: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for longlong4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ulonglong4 {
    pub x: ::std::os::raw::c_ulonglong,
    pub y: ::std::os::raw::c_ulonglong,
    pub z: ::std::os::raw::c_ulonglong,
    pub w: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for ulonglong4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct double1 {
    pub x: f64,
}
impl ::std::default::Default for double1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct double2 {
    pub x: f64,
    pub y: f64,
}
impl ::std::default::Default for double2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct double3 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
impl ::std::default::Default for double3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct double4 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub w: f64,
}
impl ::std::default::Default for double4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dim3 {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub z: ::std::os::raw::c_uint,
}
impl ::std::default::Default for dim3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cuFloatComplex = float2;
pub type cuDoubleComplex = double2;
pub type cuComplex = cuFloatComplex;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cufftResult_t {
    CUFFT_SUCCESS = 0,
    CUFFT_INVALID_PLAN = 1,
    CUFFT_ALLOC_FAILED = 2,
    CUFFT_INVALID_TYPE = 3,
    CUFFT_INVALID_VALUE = 4,
    CUFFT_INTERNAL_ERROR = 5,
    CUFFT_EXEC_FAILED = 6,
    CUFFT_SETUP_FAILED = 7,
    CUFFT_INVALID_SIZE = 8,
    CUFFT_UNALIGNED_DATA = 9,
    CUFFT_INCOMPLETE_PARAMETER_LIST = 10,
    CUFFT_INVALID_DEVICE = 11,
    CUFFT_PARSE_ERROR = 12,
    CUFFT_NO_WORKSPACE = 13,
    CUFFT_NOT_IMPLEMENTED = 14,
    CUFFT_LICENSE_ERROR = 15,
}
pub type cufftResult = cufftResult_t;
pub type cufftReal = f32;
pub type cufftDoubleReal = f64;
pub type cufftComplex = cuComplex;
pub type cufftDoubleComplex = cuDoubleComplex;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cufftType_t {
    CUFFT_R2C = 42,
    CUFFT_C2R = 44,
    CUFFT_C2C = 41,
    CUFFT_D2Z = 106,
    CUFFT_Z2D = 108,
    CUFFT_Z2Z = 105,
}
pub type cufftType = cufftType_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cufftCompatibility_t {
    CUFFT_COMPATIBILITY_NATIVE = 0,
    CUFFT_COMPATIBILITY_FFTW_PADDING = 1,
    CUFFT_COMPATIBILITY_FFTW_ASYMMETRIC = 2,
    CUFFT_COMPATIBILITY_FFTW_ALL = 3,
}
pub type cufftCompatibility = cufftCompatibility_t;
pub type cufftHandle = ::std::os::raw::c_int;
pub type fftw_complex = [f64; 2usize];
pub type fftwf_complex = [f32; 2usize];
pub type fftw_plan = *mut ::std::os::raw::c_void;
pub type fftwf_plan = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fftw_iodim {
    pub n: ::std::os::raw::c_int,
    pub is: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_int,
}
impl ::std::default::Default for fftw_iodim {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fftwf_iodim = fftw_iodim;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fftw_iodim64 {
    pub n: ::std::os::raw::c_int,
    pub is: size_t,
    pub os: size_t,
}
impl ::std::default::Default for fftw_iodim64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fftwf_iodim64 = fftw_iodim64;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "cufftw", kind = "dylib")]
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut signgam: ::std::os::raw::c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[link(name = "cufftw", kind = "dylib")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn acos(__x: f64) -> f64;
    pub fn __acos(__x: f64) -> f64;
    pub fn asin(__x: f64) -> f64;
    pub fn __asin(__x: f64) -> f64;
    pub fn atan(__x: f64) -> f64;
    pub fn __atan(__x: f64) -> f64;
    pub fn atan2(__y: f64, __x: f64) -> f64;
    pub fn __atan2(__y: f64, __x: f64) -> f64;
    pub fn cos(__x: f64) -> f64;
    pub fn __cos(__x: f64) -> f64;
    pub fn sin(__x: f64) -> f64;
    pub fn __sin(__x: f64) -> f64;
    pub fn tan(__x: f64) -> f64;
    pub fn __tan(__x: f64) -> f64;
    pub fn cosh(__x: f64) -> f64;
    pub fn __cosh(__x: f64) -> f64;
    pub fn sinh(__x: f64) -> f64;
    pub fn __sinh(__x: f64) -> f64;
    pub fn tanh(__x: f64) -> f64;
    pub fn __tanh(__x: f64) -> f64;
    pub fn acosh(__x: f64) -> f64;
    pub fn __acosh(__x: f64) -> f64;
    pub fn asinh(__x: f64) -> f64;
    pub fn __asinh(__x: f64) -> f64;
    pub fn atanh(__x: f64) -> f64;
    pub fn __atanh(__x: f64) -> f64;
    pub fn exp(__x: f64) -> f64;
    pub fn __exp(__x: f64) -> f64;
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn log(__x: f64) -> f64;
    pub fn __log(__x: f64) -> f64;
    pub fn log10(__x: f64) -> f64;
    pub fn __log10(__x: f64) -> f64;
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn expm1(__x: f64) -> f64;
    pub fn __expm1(__x: f64) -> f64;
    pub fn log1p(__x: f64) -> f64;
    pub fn __log1p(__x: f64) -> f64;
    pub fn logb(__x: f64) -> f64;
    pub fn __logb(__x: f64) -> f64;
    pub fn exp2(__x: f64) -> f64;
    pub fn __exp2(__x: f64) -> f64;
    pub fn log2(__x: f64) -> f64;
    pub fn __log2(__x: f64) -> f64;
    pub fn pow(__x: f64, __y: f64) -> f64;
    pub fn __pow(__x: f64, __y: f64) -> f64;
    pub fn sqrt(__x: f64) -> f64;
    pub fn __sqrt(__x: f64) -> f64;
    pub fn hypot(__x: f64, __y: f64) -> f64;
    pub fn __hypot(__x: f64, __y: f64) -> f64;
    pub fn cbrt(__x: f64) -> f64;
    pub fn __cbrt(__x: f64) -> f64;
    pub fn ceil(__x: f64) -> f64;
    pub fn __ceil(__x: f64) -> f64;
    pub fn fabs(__x: f64) -> f64;
    pub fn __fabs(__x: f64) -> f64;
    pub fn floor(__x: f64) -> f64;
    pub fn __floor(__x: f64) -> f64;
    pub fn fmod(__x: f64, __y: f64) -> f64;
    pub fn __fmod(__x: f64, __y: f64) -> f64;
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
    pub fn drem(__x: f64, __y: f64) -> f64;
    pub fn __drem(__x: f64, __y: f64) -> f64;
    pub fn significand(__x: f64) -> f64;
    pub fn __significand(__x: f64) -> f64;
    pub fn copysign(__x: f64, __y: f64) -> f64;
    pub fn __copysign(__x: f64, __y: f64) -> f64;
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
    pub fn j0(arg1: f64) -> f64;
    pub fn __j0(arg1: f64) -> f64;
    pub fn j1(arg1: f64) -> f64;
    pub fn __j1(arg1: f64) -> f64;
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn y0(arg1: f64) -> f64;
    pub fn __y0(arg1: f64) -> f64;
    pub fn y1(arg1: f64) -> f64;
    pub fn __y1(arg1: f64) -> f64;
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn erf(arg1: f64) -> f64;
    pub fn __erf(arg1: f64) -> f64;
    pub fn erfc(arg1: f64) -> f64;
    pub fn __erfc(arg1: f64) -> f64;
    pub fn lgamma(arg1: f64) -> f64;
    pub fn __lgamma(arg1: f64) -> f64;
    pub fn tgamma(arg1: f64) -> f64;
    pub fn __tgamma(arg1: f64) -> f64;
    pub fn gamma(arg1: f64) -> f64;
    pub fn __gamma(arg1: f64) -> f64;
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn rint(__x: f64) -> f64;
    pub fn __rint(__x: f64) -> f64;
    pub fn nextafter(__x: f64, __y: f64) -> f64;
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
    pub fn remainder(__x: f64, __y: f64) -> f64;
    pub fn __remainder(__x: f64, __y: f64) -> f64;
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn nearbyint(__x: f64) -> f64;
    pub fn __nearbyint(__x: f64) -> f64;
    pub fn round(__x: f64) -> f64;
    pub fn __round(__x: f64) -> f64;
    pub fn trunc(__x: f64) -> f64;
    pub fn __trunc(__x: f64) -> f64;
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn fdim(__x: f64, __y: f64) -> f64;
    pub fn __fdim(__x: f64, __y: f64) -> f64;
    pub fn fmax(__x: f64, __y: f64) -> f64;
    pub fn __fmax(__x: f64, __y: f64) -> f64;
    pub fn fmin(__x: f64, __y: f64) -> f64;
    pub fn __fmin(__x: f64, __y: f64) -> f64;
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn scalb(__x: f64, __n: f64) -> f64;
    pub fn __scalb(__x: f64, __n: f64) -> f64;
    pub fn acosf(__x: f32) -> f32;
    pub fn __acosf(__x: f32) -> f32;
    pub fn asinf(__x: f32) -> f32;
    pub fn __asinf(__x: f32) -> f32;
    pub fn atanf(__x: f32) -> f32;
    pub fn __atanf(__x: f32) -> f32;
    pub fn atan2f(__y: f32, __x: f32) -> f32;
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
    pub fn cosf(__x: f32) -> f32;
    pub fn __cosf(__x: f32) -> f32;
    pub fn sinf(__x: f32) -> f32;
    pub fn __sinf(__x: f32) -> f32;
    pub fn tanf(__x: f32) -> f32;
    pub fn __tanf(__x: f32) -> f32;
    pub fn coshf(__x: f32) -> f32;
    pub fn __coshf(__x: f32) -> f32;
    pub fn sinhf(__x: f32) -> f32;
    pub fn __sinhf(__x: f32) -> f32;
    pub fn tanhf(__x: f32) -> f32;
    pub fn __tanhf(__x: f32) -> f32;
    pub fn acoshf(__x: f32) -> f32;
    pub fn __acoshf(__x: f32) -> f32;
    pub fn asinhf(__x: f32) -> f32;
    pub fn __asinhf(__x: f32) -> f32;
    pub fn atanhf(__x: f32) -> f32;
    pub fn __atanhf(__x: f32) -> f32;
    pub fn expf(__x: f32) -> f32;
    pub fn __expf(__x: f32) -> f32;
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    pub fn logf(__x: f32) -> f32;
    pub fn __logf(__x: f32) -> f32;
    pub fn log10f(__x: f32) -> f32;
    pub fn __log10f(__x: f32) -> f32;
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    pub fn expm1f(__x: f32) -> f32;
    pub fn __expm1f(__x: f32) -> f32;
    pub fn log1pf(__x: f32) -> f32;
    pub fn __log1pf(__x: f32) -> f32;
    pub fn logbf(__x: f32) -> f32;
    pub fn __logbf(__x: f32) -> f32;
    pub fn exp2f(__x: f32) -> f32;
    pub fn __exp2f(__x: f32) -> f32;
    pub fn log2f(__x: f32) -> f32;
    pub fn __log2f(__x: f32) -> f32;
    pub fn powf(__x: f32, __y: f32) -> f32;
    pub fn __powf(__x: f32, __y: f32) -> f32;
    pub fn sqrtf(__x: f32) -> f32;
    pub fn __sqrtf(__x: f32) -> f32;
    pub fn hypotf(__x: f32, __y: f32) -> f32;
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
    pub fn cbrtf(__x: f32) -> f32;
    pub fn __cbrtf(__x: f32) -> f32;
    pub fn ceilf(__x: f32) -> f32;
    pub fn __ceilf(__x: f32) -> f32;
    pub fn fabsf(__x: f32) -> f32;
    pub fn __fabsf(__x: f32) -> f32;
    pub fn floorf(__x: f32) -> f32;
    pub fn __floorf(__x: f32) -> f32;
    pub fn fmodf(__x: f32, __y: f32) -> f32;
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
    pub fn dremf(__x: f32, __y: f32) -> f32;
    pub fn __dremf(__x: f32, __y: f32) -> f32;
    pub fn significandf(__x: f32) -> f32;
    pub fn __significandf(__x: f32) -> f32;
    pub fn copysignf(__x: f32, __y: f32) -> f32;
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
    pub fn j0f(arg1: f32) -> f32;
    pub fn __j0f(arg1: f32) -> f32;
    pub fn j1f(arg1: f32) -> f32;
    pub fn __j1f(arg1: f32) -> f32;
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
    pub fn y0f(arg1: f32) -> f32;
    pub fn __y0f(arg1: f32) -> f32;
    pub fn y1f(arg1: f32) -> f32;
    pub fn __y1f(arg1: f32) -> f32;
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
    pub fn erff(arg1: f32) -> f32;
    pub fn __erff(arg1: f32) -> f32;
    pub fn erfcf(arg1: f32) -> f32;
    pub fn __erfcf(arg1: f32) -> f32;
    pub fn lgammaf(arg1: f32) -> f32;
    pub fn __lgammaf(arg1: f32) -> f32;
    pub fn tgammaf(arg1: f32) -> f32;
    pub fn __tgammaf(arg1: f32) -> f32;
    pub fn gammaf(arg1: f32) -> f32;
    pub fn __gammaf(arg1: f32) -> f32;
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
    pub fn rintf(__x: f32) -> f32;
    pub fn __rintf(__x: f32) -> f32;
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
    pub fn remainderf(__x: f32, __y: f32) -> f32;
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    pub fn nearbyintf(__x: f32) -> f32;
    pub fn __nearbyintf(__x: f32) -> f32;
    pub fn roundf(__x: f32) -> f32;
    pub fn __roundf(__x: f32) -> f32;
    pub fn truncf(__x: f32) -> f32;
    pub fn __truncf(__x: f32) -> f32;
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn fdimf(__x: f32, __y: f32) -> f32;
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
    pub fn fminf(__x: f32, __y: f32) -> f32;
    pub fn __fminf(__x: f32, __y: f32) -> f32;
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    pub fn scalbf(__x: f32, __n: f32) -> f32;
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
    pub fn acosl(__x: f64) -> f64;
    pub fn __acosl(__x: f64) -> f64;
    pub fn asinl(__x: f64) -> f64;
    pub fn __asinl(__x: f64) -> f64;
    pub fn atanl(__x: f64) -> f64;
    pub fn __atanl(__x: f64) -> f64;
    pub fn atan2l(__y: f64, __x: f64) -> f64;
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
    pub fn cosl(__x: f64) -> f64;
    pub fn __cosl(__x: f64) -> f64;
    pub fn sinl(__x: f64) -> f64;
    pub fn __sinl(__x: f64) -> f64;
    pub fn tanl(__x: f64) -> f64;
    pub fn __tanl(__x: f64) -> f64;
    pub fn coshl(__x: f64) -> f64;
    pub fn __coshl(__x: f64) -> f64;
    pub fn sinhl(__x: f64) -> f64;
    pub fn __sinhl(__x: f64) -> f64;
    pub fn tanhl(__x: f64) -> f64;
    pub fn __tanhl(__x: f64) -> f64;
    pub fn acoshl(__x: f64) -> f64;
    pub fn __acoshl(__x: f64) -> f64;
    pub fn asinhl(__x: f64) -> f64;
    pub fn __asinhl(__x: f64) -> f64;
    pub fn atanhl(__x: f64) -> f64;
    pub fn __atanhl(__x: f64) -> f64;
    pub fn expl(__x: f64) -> f64;
    pub fn __expl(__x: f64) -> f64;
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn logl(__x: f64) -> f64;
    pub fn __logl(__x: f64) -> f64;
    pub fn log10l(__x: f64) -> f64;
    pub fn __log10l(__x: f64) -> f64;
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
    pub fn expm1l(__x: f64) -> f64;
    pub fn __expm1l(__x: f64) -> f64;
    pub fn log1pl(__x: f64) -> f64;
    pub fn __log1pl(__x: f64) -> f64;
    pub fn logbl(__x: f64) -> f64;
    pub fn __logbl(__x: f64) -> f64;
    pub fn exp2l(__x: f64) -> f64;
    pub fn __exp2l(__x: f64) -> f64;
    pub fn log2l(__x: f64) -> f64;
    pub fn __log2l(__x: f64) -> f64;
    pub fn powl(__x: f64, __y: f64) -> f64;
    pub fn __powl(__x: f64, __y: f64) -> f64;
    pub fn sqrtl(__x: f64) -> f64;
    pub fn __sqrtl(__x: f64) -> f64;
    pub fn hypotl(__x: f64, __y: f64) -> f64;
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
    pub fn cbrtl(__x: f64) -> f64;
    pub fn __cbrtl(__x: f64) -> f64;
    pub fn ceill(__x: f64) -> f64;
    pub fn __ceill(__x: f64) -> f64;
    pub fn fabsl(__x: f64) -> f64;
    pub fn __fabsl(__x: f64) -> f64;
    pub fn floorl(__x: f64) -> f64;
    pub fn __floorl(__x: f64) -> f64;
    pub fn fmodl(__x: f64, __y: f64) -> f64;
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
    pub fn dreml(__x: f64, __y: f64) -> f64;
    pub fn __dreml(__x: f64, __y: f64) -> f64;
    pub fn significandl(__x: f64) -> f64;
    pub fn __significandl(__x: f64) -> f64;
    pub fn copysignl(__x: f64, __y: f64) -> f64;
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
    pub fn j0l(arg1: f64) -> f64;
    pub fn __j0l(arg1: f64) -> f64;
    pub fn j1l(arg1: f64) -> f64;
    pub fn __j1l(arg1: f64) -> f64;
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn y0l(arg1: f64) -> f64;
    pub fn __y0l(arg1: f64) -> f64;
    pub fn y1l(arg1: f64) -> f64;
    pub fn __y1l(arg1: f64) -> f64;
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    pub fn erfl(arg1: f64) -> f64;
    pub fn __erfl(arg1: f64) -> f64;
    pub fn erfcl(arg1: f64) -> f64;
    pub fn __erfcl(arg1: f64) -> f64;
    pub fn lgammal(arg1: f64) -> f64;
    pub fn __lgammal(arg1: f64) -> f64;
    pub fn tgammal(arg1: f64) -> f64;
    pub fn __tgammal(arg1: f64) -> f64;
    pub fn gammal(arg1: f64) -> f64;
    pub fn __gammal(arg1: f64) -> f64;
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn rintl(__x: f64) -> f64;
    pub fn __rintl(__x: f64) -> f64;
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
    pub fn remainderl(__x: f64, __y: f64) -> f64;
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn nearbyintl(__x: f64) -> f64;
    pub fn __nearbyintl(__x: f64) -> f64;
    pub fn roundl(__x: f64) -> f64;
    pub fn __roundl(__x: f64) -> f64;
    pub fn truncl(__x: f64) -> f64;
    pub fn __truncl(__x: f64) -> f64;
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn fdiml(__x: f64, __y: f64) -> f64;
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
    pub fn fminl(__x: f64, __y: f64) -> f64;
    pub fn __fminl(__x: f64, __y: f64) -> f64;
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn scalbl(__x: f64, __n: f64) -> f64;
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
    pub fn cufftPlan1d(plan: *mut cufftHandle, nx: ::std::os::raw::c_int,
                       type_: cufftType, batch: ::std::os::raw::c_int)
     -> cufftResult;
    pub fn cufftPlan2d(plan: *mut cufftHandle, nx: ::std::os::raw::c_int,
                       ny: ::std::os::raw::c_int, type_: cufftType)
     -> cufftResult;
    pub fn cufftPlan3d(plan: *mut cufftHandle, nx: ::std::os::raw::c_int,
                       ny: ::std::os::raw::c_int, nz: ::std::os::raw::c_int,
                       type_: cufftType) -> cufftResult;
    pub fn cufftPlanMany(plan: *mut cufftHandle, rank: ::std::os::raw::c_int,
                         n: *mut ::std::os::raw::c_int,
                         inembed: *mut ::std::os::raw::c_int,
                         istride: ::std::os::raw::c_int,
                         idist: ::std::os::raw::c_int,
                         onembed: *mut ::std::os::raw::c_int,
                         ostride: ::std::os::raw::c_int,
                         odist: ::std::os::raw::c_int, type_: cufftType,
                         batch: ::std::os::raw::c_int) -> cufftResult;
    pub fn cufftMakePlan1d(plan: cufftHandle, nx: ::std::os::raw::c_int,
                           type_: cufftType, batch: ::std::os::raw::c_int,
                           workSize: *mut size_t) -> cufftResult;
    pub fn cufftMakePlan2d(plan: cufftHandle, nx: ::std::os::raw::c_int,
                           ny: ::std::os::raw::c_int, type_: cufftType,
                           workSize: *mut size_t) -> cufftResult;
    pub fn cufftMakePlan3d(plan: cufftHandle, nx: ::std::os::raw::c_int,
                           ny: ::std::os::raw::c_int,
                           nz: ::std::os::raw::c_int, type_: cufftType,
                           workSize: *mut size_t) -> cufftResult;
    pub fn cufftMakePlanMany(plan: cufftHandle, rank: ::std::os::raw::c_int,
                             n: *mut ::std::os::raw::c_int,
                             inembed: *mut ::std::os::raw::c_int,
                             istride: ::std::os::raw::c_int,
                             idist: ::std::os::raw::c_int,
                             onembed: *mut ::std::os::raw::c_int,
                             ostride: ::std::os::raw::c_int,
                             odist: ::std::os::raw::c_int, type_: cufftType,
                             batch: ::std::os::raw::c_int,
                             workSize: *mut size_t) -> cufftResult;
    pub fn cufftMakePlanMany64(plan: cufftHandle, rank: ::std::os::raw::c_int,
                               n: *mut ::std::os::raw::c_longlong,
                               inembed: *mut ::std::os::raw::c_longlong,
                               istride: ::std::os::raw::c_longlong,
                               idist: ::std::os::raw::c_longlong,
                               onembed: *mut ::std::os::raw::c_longlong,
                               ostride: ::std::os::raw::c_longlong,
                               odist: ::std::os::raw::c_longlong,
                               type_: cufftType,
                               batch: ::std::os::raw::c_longlong,
                               workSize: *mut size_t) -> cufftResult;
    pub fn cufftGetSizeMany64(plan: cufftHandle, rank: ::std::os::raw::c_int,
                              n: *mut ::std::os::raw::c_longlong,
                              inembed: *mut ::std::os::raw::c_longlong,
                              istride: ::std::os::raw::c_longlong,
                              idist: ::std::os::raw::c_longlong,
                              onembed: *mut ::std::os::raw::c_longlong,
                              ostride: ::std::os::raw::c_longlong,
                              odist: ::std::os::raw::c_longlong,
                              type_: cufftType,
                              batch: ::std::os::raw::c_longlong,
                              workSize: *mut size_t) -> cufftResult;
    pub fn cufftEstimate1d(nx: ::std::os::raw::c_int, type_: cufftType,
                           batch: ::std::os::raw::c_int,
                           workSize: *mut size_t) -> cufftResult;
    pub fn cufftEstimate2d(nx: ::std::os::raw::c_int,
                           ny: ::std::os::raw::c_int, type_: cufftType,
                           workSize: *mut size_t) -> cufftResult;
    pub fn cufftEstimate3d(nx: ::std::os::raw::c_int,
                           ny: ::std::os::raw::c_int,
                           nz: ::std::os::raw::c_int, type_: cufftType,
                           workSize: *mut size_t) -> cufftResult;
    pub fn cufftEstimateMany(rank: ::std::os::raw::c_int,
                             n: *mut ::std::os::raw::c_int,
                             inembed: *mut ::std::os::raw::c_int,
                             istride: ::std::os::raw::c_int,
                             idist: ::std::os::raw::c_int,
                             onembed: *mut ::std::os::raw::c_int,
                             ostride: ::std::os::raw::c_int,
                             odist: ::std::os::raw::c_int, type_: cufftType,
                             batch: ::std::os::raw::c_int,
                             workSize: *mut size_t) -> cufftResult;
    pub fn cufftCreate(handle: *mut cufftHandle) -> cufftResult;
    pub fn cufftGetSize1d(handle: cufftHandle, nx: ::std::os::raw::c_int,
                          type_: cufftType, batch: ::std::os::raw::c_int,
                          workSize: *mut size_t) -> cufftResult;
    pub fn cufftGetSize2d(handle: cufftHandle, nx: ::std::os::raw::c_int,
                          ny: ::std::os::raw::c_int, type_: cufftType,
                          workSize: *mut size_t) -> cufftResult;
    pub fn cufftGetSize3d(handle: cufftHandle, nx: ::std::os::raw::c_int,
                          ny: ::std::os::raw::c_int,
                          nz: ::std::os::raw::c_int, type_: cufftType,
                          workSize: *mut size_t) -> cufftResult;
    pub fn cufftGetSizeMany(handle: cufftHandle, rank: ::std::os::raw::c_int,
                            n: *mut ::std::os::raw::c_int,
                            inembed: *mut ::std::os::raw::c_int,
                            istride: ::std::os::raw::c_int,
                            idist: ::std::os::raw::c_int,
                            onembed: *mut ::std::os::raw::c_int,
                            ostride: ::std::os::raw::c_int,
                            odist: ::std::os::raw::c_int, type_: cufftType,
                            batch: ::std::os::raw::c_int,
                            workArea: *mut size_t) -> cufftResult;
    pub fn cufftGetSize(handle: cufftHandle, workSize: *mut size_t)
     -> cufftResult;
    pub fn cufftSetWorkArea(plan: cufftHandle,
                            workArea: *mut ::std::os::raw::c_void)
     -> cufftResult;
    pub fn cufftSetAutoAllocation(plan: cufftHandle,
                                  autoAllocate: ::std::os::raw::c_int)
     -> cufftResult;
    pub fn cufftExecC2C(plan: cufftHandle, idata: *mut cufftComplex,
                        odata: *mut cufftComplex,
                        direction: ::std::os::raw::c_int) -> cufftResult;
    pub fn cufftExecR2C(plan: cufftHandle, idata: *mut cufftReal,
                        odata: *mut cufftComplex) -> cufftResult;
    pub fn cufftExecC2R(plan: cufftHandle, idata: *mut cufftComplex,
                        odata: *mut cufftReal) -> cufftResult;
    pub fn cufftExecZ2Z(plan: cufftHandle, idata: *mut cufftDoubleComplex,
                        odata: *mut cufftDoubleComplex,
                        direction: ::std::os::raw::c_int) -> cufftResult;
    pub fn cufftExecD2Z(plan: cufftHandle, idata: *mut cufftDoubleReal,
                        odata: *mut cufftDoubleComplex) -> cufftResult;
    pub fn cufftExecZ2D(plan: cufftHandle, idata: *mut cufftDoubleComplex,
                        odata: *mut cufftDoubleReal) -> cufftResult;
    pub fn cufftSetStream(plan: cufftHandle, stream: cudaStream_t)
     -> cufftResult;
    pub fn cufftSetCompatibilityMode(plan: cufftHandle,
                                     mode: cufftCompatibility) -> cufftResult;
    pub fn cufftDestroy(plan: cufftHandle) -> cufftResult;
    pub fn cufftGetVersion(version: *mut ::std::os::raw::c_int)
     -> cufftResult;
    pub fn fftw_plan_dft_1d(n: ::std::os::raw::c_int, in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_2d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int, in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_3d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            n2: ::std::os::raw::c_int, in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft(rank: ::std::os::raw::c_int,
                         n: *const ::std::os::raw::c_int,
                         in_: *mut fftw_complex, out: *mut fftw_complex,
                         sign: ::std::os::raw::c_int,
                         flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_r2c_1d(n: ::std::os::raw::c_int, in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int, in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                n2: ::std::os::raw::c_int, in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_r2c(rank: ::std::os::raw::c_int,
                             n: *const ::std::os::raw::c_int, in_: *mut f64,
                             out: *mut fftw_complex,
                             flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                in_: *mut fftw_complex, out: *mut f64,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                in_: *mut fftw_complex, out: *mut f64,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                n2: ::std::os::raw::c_int,
                                in_: *mut fftw_complex, out: *mut f64,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_dft_c2r(rank: ::std::os::raw::c_int,
                             n: *const ::std::os::raw::c_int,
                             in_: *mut fftw_complex, out: *mut f64,
                             flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_many_dft(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              batch: ::std::os::raw::c_int,
                              in_: *mut fftw_complex,
                              inembed: *const ::std::os::raw::c_int,
                              istride: ::std::os::raw::c_int,
                              idist: ::std::os::raw::c_int,
                              out: *mut fftw_complex,
                              onembed: *const ::std::os::raw::c_int,
                              ostride: ::std::os::raw::c_int,
                              odist: ::std::os::raw::c_int,
                              sign: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                  n: *const ::std::os::raw::c_int,
                                  batch: ::std::os::raw::c_int, in_: *mut f64,
                                  inembed: *const ::std::os::raw::c_int,
                                  istride: ::std::os::raw::c_int,
                                  idist: ::std::os::raw::c_int,
                                  out: *mut fftw_complex,
                                  onembed: *const ::std::os::raw::c_int,
                                  ostride: ::std::os::raw::c_int,
                                  odist: ::std::os::raw::c_int,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                  n: *const ::std::os::raw::c_int,
                                  batch: ::std::os::raw::c_int,
                                  in_: *mut fftw_complex,
                                  inembed: *const ::std::os::raw::c_int,
                                  istride: ::std::os::raw::c_int,
                                  idist: ::std::os::raw::c_int, out: *mut f64,
                                  onembed: *const ::std::os::raw::c_int,
                                  ostride: ::std::os::raw::c_int,
                                  odist: ::std::os::raw::c_int,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_guru_dft(rank: ::std::os::raw::c_int,
                              dims: *const fftw_iodim,
                              batch_rank: ::std::os::raw::c_int,
                              batch_dims: *const fftw_iodim,
                              in_: *mut fftw_complex, out: *mut fftw_complex,
                              sign: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                  dims: *const fftw_iodim,
                                  batch_rank: ::std::os::raw::c_int,
                                  batch_dims: *const fftw_iodim,
                                  in_: *mut f64, out: *mut fftw_complex,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                  dims: *const fftw_iodim,
                                  batch_rank: ::std::os::raw::c_int,
                                  batch_dims: *const fftw_iodim,
                                  in_: *mut fftw_complex, out: *mut f64,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
    pub fn fftw_execute(plan: fftw_plan);
    pub fn fftw_execute_dft(plan: fftw_plan, idata: *mut fftw_complex,
                            odata: *mut fftw_complex);
    pub fn fftw_execute_dft_r2c(plan: fftw_plan, idata: *mut f64,
                                odata: *mut fftw_complex);
    pub fn fftw_execute_dft_c2r(plan: fftw_plan, idata: *mut fftw_complex,
                                odata: *mut f64);
    pub fn fftwf_plan_dft_1d(n: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex, out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex, out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex, out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut fftwf_complex, out: *mut fftwf_complex,
                          sign: ::std::os::raw::c_int,
                          flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c_1d(n: ::std::os::raw::c_int, in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int, in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int, in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int, in_: *mut f32,
                              out: *mut fftwf_complex,
                              flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex, out: *mut f32,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex, out: *mut f32,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex, out: *mut f32,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut fftwf_complex, out: *mut f32,
                              flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_many_dft(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               batch: ::std::os::raw::c_int,
                               in_: *mut fftwf_complex,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut fftwf_complex,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   batch: ::std::os::raw::c_int,
                                   in_: *mut f32,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut fftwf_complex,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
    pub fn fftwf_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   batch: ::std::os::raw::c_int,
                                   in_: *mut fftwf_complex,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut f32,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
    pub fn fftwf_plan_guru_dft(rank: ::std::os::raw::c_int,
                               dims: *const fftwf_iodim,
                               batch_rank: ::std::os::raw::c_int,
                               batch_dims: *const fftwf_iodim,
                               in_: *mut fftwf_complex,
                               out: *mut fftwf_complex,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint) -> fftwf_plan;
    pub fn fftwf_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                   dims: *const fftwf_iodim,
                                   batch_rank: ::std::os::raw::c_int,
                                   batch_dims: *const fftwf_iodim,
                                   in_: *mut f32, out: *mut fftwf_complex,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
    pub fn fftwf_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                   dims: *const fftwf_iodim,
                                   batch_rank: ::std::os::raw::c_int,
                                   batch_dims: *const fftwf_iodim,
                                   in_: *mut fftwf_complex, out: *mut f32,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
    pub fn fftwf_execute(plan: fftw_plan);
    pub fn fftwf_execute_dft(plan: fftwf_plan, idata: *mut fftwf_complex,
                             odata: *mut fftwf_complex);
    pub fn fftwf_execute_dft_r2c(plan: fftwf_plan, idata: *mut f32,
                                 odata: *mut fftwf_complex);
    pub fn fftwf_execute_dft_c2r(plan: fftwf_plan, idata: *mut fftwf_complex,
                                 odata: *mut f32);
    pub fn fftw_malloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn fftwf_malloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn fftw_free(pointer: *mut ::std::os::raw::c_void);
    pub fn fftwf_free(pointer: *mut ::std::os::raw::c_void);
    pub fn fftw_export_wisdom_to_file(output_file: *mut FILE);
    pub fn fftwf_export_wisdom_to_file(output_file: *mut FILE);
    pub fn fftw_import_wisdom_from_file(input_file: *mut FILE);
    pub fn fftwf_import_wisdom_from_file(input_file: *mut FILE);
    pub fn fftw_print_plan(plan: fftw_plan);
    pub fn fftwf_print_plan(plan: fftwf_plan);
    pub fn fftw_set_timelimit(seconds: f64);
    pub fn fftwf_set_timelimit(seconds: f64);
    pub fn fftw_cost(plan: fftw_plan) -> f64;
    pub fn fftwf_cost(plan: fftw_plan) -> f64;
    pub fn fftw_flops(plan: fftw_plan, add: *mut f64, mul: *mut f64,
                      fma: *mut f64);
    pub fn fftwf_flops(plan: fftw_plan, add: *mut f64, mul: *mut f64,
                       fma: *mut f64);
    pub fn fftw_destroy_plan(plan: fftw_plan);
    pub fn fftwf_destroy_plan(plan: fftwf_plan);
    pub fn fftw_cleanup();
    pub fn fftwf_cleanup();
}
