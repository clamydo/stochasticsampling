// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __llvm__: ::std::os::raw::c_uchar = 1;
pub const __clang__: ::std::os::raw::c_uchar = 1;
pub const __clang_major__: ::std::os::raw::c_uchar = 3;
pub const __clang_minor__: ::std::os::raw::c_uchar = 7;
pub const __clang_patchlevel__: ::std::os::raw::c_uchar = 1;
pub const __GNUC_MINOR__: ::std::os::raw::c_uchar = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uchar = 1;
pub const __GNUC__: ::std::os::raw::c_uchar = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_ushort = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uchar = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uchar = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uchar = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uchar = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uchar = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uchar = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uchar = 1;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uchar = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uchar = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_ushort = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_ushort = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_ushort = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uchar = 1;
pub const _LP64: ::std::os::raw::c_uchar = 1;
pub const __LP64__: ::std::os::raw::c_uchar = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uchar = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uchar = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_char = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_char = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_char = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uchar = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uchar = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uchar = 16;
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __SIZE_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uchar = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uchar = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uchar = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uchar = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uchar = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_char = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_char = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uchar = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uchar = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_ushort = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_short = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_short = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uchar = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uchar = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_ushort = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_short = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_short = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uchar = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uchar = 1;
pub const __UINT8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_FAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uchar = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uchar = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __amd64__: ::std::os::raw::c_uchar = 1;
pub const __amd64: ::std::os::raw::c_uchar = 1;
pub const __x86_64: ::std::os::raw::c_uchar = 1;
pub const __x86_64__: ::std::os::raw::c_uchar = 1;
pub const __k8: ::std::os::raw::c_uchar = 1;
pub const __k8__: ::std::os::raw::c_uchar = 1;
pub const __tune_k8__: ::std::os::raw::c_uchar = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uchar = 1;
pub const __SSE2__: ::std::os::raw::c_uchar = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uchar = 1;
pub const __SSE__: ::std::os::raw::c_uchar = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uchar = 1;
pub const __MMX__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uchar = 1;
pub const unix: ::std::os::raw::c_uchar = 1;
pub const __unix: ::std::os::raw::c_uchar = 1;
pub const __unix__: ::std::os::raw::c_uchar = 1;
pub const linux: ::std::os::raw::c_uchar = 1;
pub const __linux: ::std::os::raw::c_uchar = 1;
pub const __linux__: ::std::os::raw::c_uchar = 1;
pub const __gnu_linux__: ::std::os::raw::c_uchar = 1;
pub const __ELF__: ::std::os::raw::c_uchar = 1;
pub const __STDC__: ::std::os::raw::c_uchar = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uchar = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uchar = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uchar = 1;
pub const _STDIO_H: ::std::os::raw::c_uchar = 1;
pub const _FEATURES_H: ::std::os::raw::c_uchar = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _BSD_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _SVID_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uchar = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uchar = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_MISC: ::std::os::raw::c_uchar = 1;
pub const __USE_BSD: ::std::os::raw::c_uchar = 1;
pub const __USE_SVID: ::std::os::raw::c_uchar = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uchar = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uchar = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201103;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uchar = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uchar = 6;
pub const __GLIBC__: ::std::os::raw::c_uchar = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uchar = 19;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uchar = 1;
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uchar = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uchar = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uchar = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uchar = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const __FILE_defined: ::std::os::raw::c_uchar = 1;
pub const ____FILE_defined: ::std::os::raw::c_uchar = 1;
pub const _G_config_h: ::std::os::raw::c_uchar = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uchar = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uchar = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uchar = 1;
pub const EOF: ::std::os::raw::c_char = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uchar = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uchar = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uchar = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uchar = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uchar = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uchar = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uchar = 64;
pub const _IOS_BIN: ::std::os::raw::c_uchar = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uchar = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uchar = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uchar = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uchar = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uchar = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uchar = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uchar = 64;
pub const _IO_LINKED: ::std::os::raw::c_uchar = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_ushort = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_ushort = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_ushort = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_ushort = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_ushort = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_ushort = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_ushort = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uchar = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uchar = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uchar = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uchar = 1;
pub const _IO_LEFT: ::std::os::raw::c_uchar = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uchar = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uchar = 8;
pub const _IO_DEC: ::std::os::raw::c_uchar = 16;
pub const _IO_OCT: ::std::os::raw::c_uchar = 32;
pub const _IO_HEX: ::std::os::raw::c_uchar = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uchar = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_ushort = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_ushort = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_ushort = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_ushort = 2048;
pub const _IO_FIXED: ::std::os::raw::c_ushort = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_STDIO: ::std::os::raw::c_ushort = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_ushort = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uchar = 0;
pub const _IOLBF: ::std::os::raw::c_uchar = 1;
pub const _IONBF: ::std::os::raw::c_uchar = 2;
pub const BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const SEEK_SET: ::std::os::raw::c_uchar = 0;
pub const SEEK_CUR: ::std::os::raw::c_uchar = 1;
pub const SEEK_END: ::std::os::raw::c_uchar = 2;
pub const L_tmpnam: ::std::os::raw::c_uchar = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_ushort = 4096;
pub const L_ctermid: ::std::os::raw::c_uchar = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uchar = 16;
pub const FFTW_FORWARD: ::std::os::raw::c_char = -1;
pub const FFTW_BACKWARD: ::std::os::raw::c_uchar = 1;
pub const FFTW_MEASURE: ::std::os::raw::c_uchar = 0;
pub const FFTW_DESTROY_INPUT: ::std::os::raw::c_uchar = 1;
pub const FFTW_UNALIGNED: ::std::os::raw::c_uchar = 2;
pub const FFTW_CONSERVE_MEMORY: ::std::os::raw::c_uchar = 4;
pub const FFTW_EXHAUSTIVE: ::std::os::raw::c_uchar = 8;
pub const FFTW_PRESERVE_INPUT: ::std::os::raw::c_uchar = 16;
pub const FFTW_PATIENT: ::std::os::raw::c_uchar = 32;
pub const FFTW_ESTIMATE: ::std::os::raw::c_uchar = 64;
pub const FFTW_WISDOM_ONLY: ::std::os::raw::c_uint = 2097152;
pub const FFTW_ESTIMATE_PATIENT: ::std::os::raw::c_uchar = 128;
pub const FFTW_BELIEVE_PCOST: ::std::os::raw::c_ushort = 256;
pub const FFTW_NO_DFT_R2HC: ::std::os::raw::c_ushort = 512;
pub const FFTW_NO_NONTHREADED: ::std::os::raw::c_ushort = 1024;
pub const FFTW_NO_BUFFERING: ::std::os::raw::c_ushort = 2048;
pub const FFTW_NO_INDIRECT_OP: ::std::os::raw::c_ushort = 4096;
pub const FFTW_ALLOW_LARGE_GENERIC: ::std::os::raw::c_ushort = 8192;
pub const FFTW_NO_RANK_SPLITS: ::std::os::raw::c_ushort = 16384;
pub const FFTW_NO_VRANK_SPLITS: ::std::os::raw::c_ushort = 32768;
pub const FFTW_NO_VRECURSE: ::std::os::raw::c_uint = 65536;
pub const FFTW_NO_SIMD: ::std::os::raw::c_uint = 131072;
pub const FFTW_NO_SLOW: ::std::os::raw::c_uint = 262144;
pub const FFTW_NO_FIXED_RADIX_LARGE_N: ::std::os::raw::c_uint = 524288;
pub const FFTW_ALLOW_PRUNING: ::std::os::raw::c_uint = 1048576;
pub type size_t = usize;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                                                 __buf: *mut ::std::os::raw::c_char,
                                                 __nbytes: size_t)
                                                 -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                                                 __buf: *const ::std::os::raw::c_char,
                                                 __n: size_t)
                                                 -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                                                 __pos: *mut __off64_t,
                                                 __w: ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum fftw_r2r_kind_do_not_use_me {
    FFTW_R2HC = 0,
    FFTW_HC2R = 1,
    FFTW_DHT = 2,
    FFTW_REDFT00 = 3,
    FFTW_REDFT01 = 4,
    FFTW_REDFT10 = 5,
    FFTW_REDFT11 = 6,
    FFTW_RODFT00 = 7,
    FFTW_RODFT01 = 8,
    FFTW_RODFT10 = 9,
    FFTW_RODFT11 = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fftw_iodim_do_not_use_me {
    pub n: ::std::os::raw::c_int,
    pub is: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_int,
}
impl ::std::default::Default for fftw_iodim_do_not_use_me {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ptrdiff_t = isize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fftw_iodim64_do_not_use_me {
    pub n: ptrdiff_t,
    pub is: ptrdiff_t,
    pub os: ptrdiff_t,
}
impl ::std::default::Default for fftw_iodim64_do_not_use_me {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fftw_write_char_func_do_not_use_me =
    ::std::option::Option<unsafe extern "C" fn(c: ::std::os::raw::c_char,
                                                 arg1: *mut ::std::os::raw::c_void)>;
pub type fftw_read_char_func_do_not_use_me =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>;
pub type fftw_complex = [f64; 2usize];
pub enum fftw_plan_s { }
pub type fftw_plan = *mut fftw_plan_s;
pub type fftw_iodim = fftw_iodim_do_not_use_me;
pub type fftw_iodim64 = fftw_iodim64_do_not_use_me;
pub type fftw_r2r_kind = fftw_r2r_kind_do_not_use_me;
pub type fftw_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftw_read_char_func = fftw_read_char_func_do_not_use_me;
pub type fftwf_complex = [f32; 2usize];
pub enum fftwf_plan_s { }
pub type fftwf_plan = *mut fftwf_plan_s;
pub type fftwf_iodim = fftw_iodim_do_not_use_me;
pub type fftwf_iodim64 = fftw_iodim64_do_not_use_me;
pub type fftwf_r2r_kind = fftw_r2r_kind_do_not_use_me;
pub type fftwf_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftwf_read_char_func = fftw_read_char_func_do_not_use_me;
pub type fftwl_complex = [f64; 2usize];
pub enum fftwl_plan_s { }
pub type fftwl_plan = *mut fftwl_plan_s;
pub type fftwl_iodim = fftw_iodim_do_not_use_me;
pub type fftwl_iodim64 = fftw_iodim64_do_not_use_me;
pub type fftwl_r2r_kind = fftw_r2r_kind_do_not_use_me;
pub type fftwl_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftwl_read_char_func = fftw_read_char_func_do_not_use_me;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[link(name = "fftw3f", kind = "dylib")]
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut fftw_version: [::std::os::raw::c_char; 0usize];
    pub static mut fftw_cc: [::std::os::raw::c_char; 0usize];
    pub static mut fftw_codelet_optim: [::std::os::raw::c_char; 0usize];
    pub static mut fftwf_version: [::std::os::raw::c_char; 0usize];
    pub static mut fftwf_cc: [::std::os::raw::c_char; 0usize];
    pub static mut fftwf_codelet_optim: [::std::os::raw::c_char; 0usize];
    pub static mut fftwl_version: [::std::os::raw::c_char; 0usize];
    pub static mut fftwl_cc: [::std::os::raw::c_char; 0usize];
    pub static mut fftwl_codelet_optim: [::std::os::raw::c_char; 0usize];
}
#[link(name = "fftw3f", kind = "dylib")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list,
                       arg4: *mut ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list)
                        -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE,
                    arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t)
                    -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE,
                     arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t)
                     -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE,
                       arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int)
                       -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE,
                       arg2: __off64_t,
                       arg3: ::std::os::raw::c_int)
                       -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char)
                 -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE)
                   -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char)
                  -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void,
                    __len: size_t,
                    __modes: *const ::std::os::raw::c_char)
                    -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t)
                          -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE,
                   __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int,
                   __n: size_t)
                   -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char,
                   ...)
                   -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   ...)
                   -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list)
                    -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list)
                   -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list)
                    -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char,
                    __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char,
                    ...)
                    -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char,
                     __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list)
                     -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list)
                    -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char,
                   ...)
                   -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char,
                  ...)
                  -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char,
                  ...)
                  -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list)
                   -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list)
                  -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list)
                   -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int,
                          __stream: *mut FILE)
                          -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char,
                 __n: ::std::os::raw::c_int,
                 __stream: *mut FILE)
                 -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t,
                      __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE)
                      -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t,
                    __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE)
                    -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t,
                   __stream: *mut FILE)
                   -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void,
                 __size: size_t,
                 __n: size_t,
                 __stream: *mut FILE)
                 -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void,
                  __size: size_t,
                  __n: size_t,
                  __s: *mut FILE)
                  -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void,
                          __size: size_t,
                          __n: size_t,
                          __stream: *mut FILE)
                          -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t,
                           __n: size_t,
                           __stream: *mut FILE)
                           -> size_t;
    pub fn fseek(__stream: *mut FILE,
                 __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int)
                 -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE,
                  __off: __off_t,
                  __whence: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char)
                 -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn fftw_execute(p: fftw_plan);
    pub fn fftw_plan_dft(rank: ::std::os::raw::c_int,
                         n: *const ::std::os::raw::c_int,
                         in_: *mut fftw_complex,
                         out: *mut fftw_complex,
                         sign: ::std::os::raw::c_int,
                         flags: ::std::os::raw::c_uint)
                         -> fftw_plan;
    pub fn fftw_plan_dft_1d(n: ::std::os::raw::c_int,
                            in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint)
                            -> fftw_plan;
    pub fn fftw_plan_dft_2d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint)
                            -> fftw_plan;
    pub fn fftw_plan_dft_3d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            n2: ::std::os::raw::c_int,
                            in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint)
                            -> fftw_plan;
    pub fn fftw_plan_many_dft(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              howmany: ::std::os::raw::c_int,
                              in_: *mut fftw_complex,
                              inembed: *const ::std::os::raw::c_int,
                              istride: ::std::os::raw::c_int,
                              idist: ::std::os::raw::c_int,
                              out: *mut fftw_complex,
                              onembed: *const ::std::os::raw::c_int,
                              ostride: ::std::os::raw::c_int,
                              odist: ::std::os::raw::c_int,
                              sign: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint)
                              -> fftw_plan;
    pub fn fftw_plan_guru_dft(rank: ::std::os::raw::c_int,
                              dims: *const fftw_iodim,
                              howmany_rank: ::std::os::raw::c_int,
                              howmany_dims: *const fftw_iodim,
                              in_: *mut fftw_complex,
                              out: *mut fftw_complex,
                              sign: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint)
                              -> fftw_plan;
    pub fn fftw_plan_guru_split_dft(rank: ::std::os::raw::c_int,
                                    dims: *const fftw_iodim,
                                    howmany_rank: ::std::os::raw::c_int,
                                    howmany_dims: *const fftw_iodim,
                                    ri: *mut f64,
                                    ii: *mut f64,
                                    ro: *mut f64,
                                    io: *mut f64,
                                    flags: ::std::os::raw::c_uint)
                                    -> fftw_plan;
    pub fn fftw_plan_guru64_dft(rank: ::std::os::raw::c_int,
                                dims: *const fftw_iodim64,
                                howmany_rank: ::std::os::raw::c_int,
                                howmany_dims: *const fftw_iodim64,
                                in_: *mut fftw_complex,
                                out: *mut fftw_complex,
                                sign: ::std::os::raw::c_int,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_guru64_split_dft(rank: ::std::os::raw::c_int,
                                      dims: *const fftw_iodim64,
                                      howmany_rank: ::std::os::raw::c_int,
                                      howmany_dims: *const fftw_iodim64,
                                      ri: *mut f64,
                                      ii: *mut f64,
                                      ro: *mut f64,
                                      io: *mut f64,
                                      flags: ::std::os::raw::c_uint)
                                      -> fftw_plan;
    pub fn fftw_execute_dft(p: fftw_plan, in_: *mut fftw_complex, out: *mut fftw_complex);
    pub fn fftw_execute_split_dft(p: fftw_plan,
                                  ri: *mut f64,
                                  ii: *mut f64,
                                  ro: *mut f64,
                                  io: *mut f64);
    pub fn fftw_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                  n: *const ::std::os::raw::c_int,
                                  howmany: ::std::os::raw::c_int,
                                  in_: *mut f64,
                                  inembed: *const ::std::os::raw::c_int,
                                  istride: ::std::os::raw::c_int,
                                  idist: ::std::os::raw::c_int,
                                  out: *mut fftw_complex,
                                  onembed: *const ::std::os::raw::c_int,
                                  ostride: ::std::os::raw::c_int,
                                  odist: ::std::os::raw::c_int,
                                  flags: ::std::os::raw::c_uint)
                                  -> fftw_plan;
    pub fn fftw_plan_dft_r2c(rank: ::std::os::raw::c_int,
                             n: *const ::std::os::raw::c_int,
                             in_: *mut f64,
                             out: *mut fftw_complex,
                             flags: ::std::os::raw::c_uint)
                             -> fftw_plan;
    pub fn fftw_plan_dft_r2c_1d(n: ::std::os::raw::c_int,
                                in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                n2: ::std::os::raw::c_int,
                                in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                  n: *const ::std::os::raw::c_int,
                                  howmany: ::std::os::raw::c_int,
                                  in_: *mut fftw_complex,
                                  inembed: *const ::std::os::raw::c_int,
                                  istride: ::std::os::raw::c_int,
                                  idist: ::std::os::raw::c_int,
                                  out: *mut f64,
                                  onembed: *const ::std::os::raw::c_int,
                                  ostride: ::std::os::raw::c_int,
                                  odist: ::std::os::raw::c_int,
                                  flags: ::std::os::raw::c_uint)
                                  -> fftw_plan;
    pub fn fftw_plan_dft_c2r(rank: ::std::os::raw::c_int,
                             n: *const ::std::os::raw::c_int,
                             in_: *mut fftw_complex,
                             out: *mut f64,
                             flags: ::std::os::raw::c_uint)
                             -> fftw_plan;
    pub fn fftw_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                in_: *mut fftw_complex,
                                out: *mut f64,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                in_: *mut fftw_complex,
                                out: *mut f64,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                n2: ::std::os::raw::c_int,
                                in_: *mut fftw_complex,
                                out: *mut f64,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                  dims: *const fftw_iodim,
                                  howmany_rank: ::std::os::raw::c_int,
                                  howmany_dims: *const fftw_iodim,
                                  in_: *mut f64,
                                  out: *mut fftw_complex,
                                  flags: ::std::os::raw::c_uint)
                                  -> fftw_plan;
    pub fn fftw_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                  dims: *const fftw_iodim,
                                  howmany_rank: ::std::os::raw::c_int,
                                  howmany_dims: *const fftw_iodim,
                                  in_: *mut fftw_complex,
                                  out: *mut f64,
                                  flags: ::std::os::raw::c_uint)
                                  -> fftw_plan;
    pub fn fftw_plan_guru_split_dft_r2c(rank: ::std::os::raw::c_int,
                                        dims: *const fftw_iodim,
                                        howmany_rank: ::std::os::raw::c_int,
                                        howmany_dims: *const fftw_iodim,
                                        in_: *mut f64,
                                        ro: *mut f64,
                                        io: *mut f64,
                                        flags: ::std::os::raw::c_uint)
                                        -> fftw_plan;
    pub fn fftw_plan_guru_split_dft_c2r(rank: ::std::os::raw::c_int,
                                        dims: *const fftw_iodim,
                                        howmany_rank: ::std::os::raw::c_int,
                                        howmany_dims: *const fftw_iodim,
                                        ri: *mut f64,
                                        ii: *mut f64,
                                        out: *mut f64,
                                        flags: ::std::os::raw::c_uint)
                                        -> fftw_plan;
    pub fn fftw_plan_guru64_dft_r2c(rank: ::std::os::raw::c_int,
                                    dims: *const fftw_iodim64,
                                    howmany_rank: ::std::os::raw::c_int,
                                    howmany_dims: *const fftw_iodim64,
                                    in_: *mut f64,
                                    out: *mut fftw_complex,
                                    flags: ::std::os::raw::c_uint)
                                    -> fftw_plan;
    pub fn fftw_plan_guru64_dft_c2r(rank: ::std::os::raw::c_int,
                                    dims: *const fftw_iodim64,
                                    howmany_rank: ::std::os::raw::c_int,
                                    howmany_dims: *const fftw_iodim64,
                                    in_: *mut fftw_complex,
                                    out: *mut f64,
                                    flags: ::std::os::raw::c_uint)
                                    -> fftw_plan;
    pub fn fftw_plan_guru64_split_dft_r2c(rank: ::std::os::raw::c_int,
                                          dims: *const fftw_iodim64,
                                          howmany_rank: ::std::os::raw::c_int,
                                          howmany_dims: *const fftw_iodim64,
                                          in_: *mut f64,
                                          ro: *mut f64,
                                          io: *mut f64,
                                          flags: ::std::os::raw::c_uint)
                                          -> fftw_plan;
    pub fn fftw_plan_guru64_split_dft_c2r(rank: ::std::os::raw::c_int,
                                          dims: *const fftw_iodim64,
                                          howmany_rank: ::std::os::raw::c_int,
                                          howmany_dims: *const fftw_iodim64,
                                          ri: *mut f64,
                                          ii: *mut f64,
                                          out: *mut f64,
                                          flags: ::std::os::raw::c_uint)
                                          -> fftw_plan;
    pub fn fftw_execute_dft_r2c(p: fftw_plan, in_: *mut f64, out: *mut fftw_complex);
    pub fn fftw_execute_dft_c2r(p: fftw_plan, in_: *mut fftw_complex, out: *mut f64);
    pub fn fftw_execute_split_dft_r2c(p: fftw_plan, in_: *mut f64, ro: *mut f64, io: *mut f64);
    pub fn fftw_execute_split_dft_c2r(p: fftw_plan, ri: *mut f64, ii: *mut f64, out: *mut f64);
    pub fn fftw_plan_many_r2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              howmany: ::std::os::raw::c_int,
                              in_: *mut f64,
                              inembed: *const ::std::os::raw::c_int,
                              istride: ::std::os::raw::c_int,
                              idist: ::std::os::raw::c_int,
                              out: *mut f64,
                              onembed: *const ::std::os::raw::c_int,
                              ostride: ::std::os::raw::c_int,
                              odist: ::std::os::raw::c_int,
                              kind: *const fftw_r2r_kind,
                              flags: ::std::os::raw::c_uint)
                              -> fftw_plan;
    pub fn fftw_plan_r2r(rank: ::std::os::raw::c_int,
                         n: *const ::std::os::raw::c_int,
                         in_: *mut f64,
                         out: *mut f64,
                         kind: *const fftw_r2r_kind,
                         flags: ::std::os::raw::c_uint)
                         -> fftw_plan;
    pub fn fftw_plan_r2r_1d(n: ::std::os::raw::c_int,
                            in_: *mut f64,
                            out: *mut f64,
                            kind: fftw_r2r_kind,
                            flags: ::std::os::raw::c_uint)
                            -> fftw_plan;
    pub fn fftw_plan_r2r_2d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            in_: *mut f64,
                            out: *mut f64,
                            kind0: fftw_r2r_kind,
                            kind1: fftw_r2r_kind,
                            flags: ::std::os::raw::c_uint)
                            -> fftw_plan;
    pub fn fftw_plan_r2r_3d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            n2: ::std::os::raw::c_int,
                            in_: *mut f64,
                            out: *mut f64,
                            kind0: fftw_r2r_kind,
                            kind1: fftw_r2r_kind,
                            kind2: fftw_r2r_kind,
                            flags: ::std::os::raw::c_uint)
                            -> fftw_plan;
    pub fn fftw_plan_guru_r2r(rank: ::std::os::raw::c_int,
                              dims: *const fftw_iodim,
                              howmany_rank: ::std::os::raw::c_int,
                              howmany_dims: *const fftw_iodim,
                              in_: *mut f64,
                              out: *mut f64,
                              kind: *const fftw_r2r_kind,
                              flags: ::std::os::raw::c_uint)
                              -> fftw_plan;
    pub fn fftw_plan_guru64_r2r(rank: ::std::os::raw::c_int,
                                dims: *const fftw_iodim64,
                                howmany_rank: ::std::os::raw::c_int,
                                howmany_dims: *const fftw_iodim64,
                                in_: *mut f64,
                                out: *mut f64,
                                kind: *const fftw_r2r_kind,
                                flags: ::std::os::raw::c_uint)
                                -> fftw_plan;
    pub fn fftw_execute_r2r(p: fftw_plan, in_: *mut f64, out: *mut f64);
    pub fn fftw_destroy_plan(p: fftw_plan);
    pub fn fftw_forget_wisdom();
    pub fn fftw_cleanup();
    pub fn fftw_set_timelimit(t: f64);
    pub fn fftw_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
    pub fn fftw_init_threads() -> ::std::os::raw::c_int;
    pub fn fftw_cleanup_threads();
    pub fn fftw_export_wisdom_to_filename(filename: *const ::std::os::raw::c_char)
                                          -> ::std::os::raw::c_int;
    pub fn fftw_export_wisdom_to_file(output_file: *mut FILE);
    pub fn fftw_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
    pub fn fftw_export_wisdom(write_char: fftw_write_char_func,
                              data: *mut ::std::os::raw::c_void);
    pub fn fftw_import_system_wisdom() -> ::std::os::raw::c_int;
    pub fn fftw_import_wisdom_from_filename(filename: *const ::std::os::raw::c_char)
                                            -> ::std::os::raw::c_int;
    pub fn fftw_import_wisdom_from_file(input_file: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fftw_import_wisdom_from_string(input_string: *const ::std::os::raw::c_char)
                                          -> ::std::os::raw::c_int;
    pub fn fftw_import_wisdom(read_char: fftw_read_char_func,
                              data: *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int;
    pub fn fftw_fprint_plan(p: fftw_plan, output_file: *mut FILE);
    pub fn fftw_print_plan(p: fftw_plan);
    pub fn fftw_sprint_plan(p: fftw_plan) -> *mut ::std::os::raw::c_char;
    pub fn fftw_malloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn fftw_alloc_real(n: size_t) -> *mut f64;
    pub fn fftw_alloc_complex(n: size_t) -> *mut fftw_complex;
    pub fn fftw_free(p: *mut ::std::os::raw::c_void);
    pub fn fftw_flops(p: fftw_plan, add: *mut f64, mul: *mut f64, fmas: *mut f64);
    pub fn fftw_estimate_cost(p: fftw_plan) -> f64;
    pub fn fftw_cost(p: fftw_plan) -> f64;
    pub fn fftw_alignment_of(p: *mut f64) -> ::std::os::raw::c_int;
    pub fn fftwf_execute(p: fftwf_plan);
    pub fn fftwf_plan_dft(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut fftwf_complex,
                          out: *mut fftwf_complex,
                          sign: ::std::os::raw::c_int,
                          flags: ::std::os::raw::c_uint)
                          -> fftwf_plan;
    pub fn fftwf_plan_dft_1d(n: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex,
                             out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint)
                             -> fftwf_plan;
    pub fn fftwf_plan_dft_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex,
                             out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint)
                             -> fftwf_plan;
    pub fn fftwf_plan_dft_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex,
                             out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint)
                             -> fftwf_plan;
    pub fn fftwf_plan_many_dft(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int,
                               in_: *mut fftwf_complex,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut fftwf_complex,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint)
                               -> fftwf_plan;
    pub fn fftwf_plan_guru_dft(rank: ::std::os::raw::c_int,
                               dims: *const fftwf_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwf_iodim,
                               in_: *mut fftwf_complex,
                               out: *mut fftwf_complex,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint)
                               -> fftwf_plan;
    pub fn fftwf_plan_guru_split_dft(rank: ::std::os::raw::c_int,
                                     dims: *const fftwf_iodim,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwf_iodim,
                                     ri: *mut f32,
                                     ii: *mut f32,
                                     ro: *mut f32,
                                     io: *mut f32,
                                     flags: ::std::os::raw::c_uint)
                                     -> fftwf_plan;
    pub fn fftwf_plan_guru64_dft(rank: ::std::os::raw::c_int,
                                 dims: *const fftwf_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwf_iodim64,
                                 in_: *mut fftwf_complex,
                                 out: *mut fftwf_complex,
                                 sign: ::std::os::raw::c_int,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_guru64_split_dft(rank: ::std::os::raw::c_int,
                                       dims: *const fftwf_iodim64,
                                       howmany_rank: ::std::os::raw::c_int,
                                       howmany_dims: *const fftwf_iodim64,
                                       ri: *mut f32,
                                       ii: *mut f32,
                                       ro: *mut f32,
                                       io: *mut f32,
                                       flags: ::std::os::raw::c_uint)
                                       -> fftwf_plan;
    pub fn fftwf_execute_dft(p: fftwf_plan, in_: *mut fftwf_complex, out: *mut fftwf_complex);
    pub fn fftwf_execute_split_dft(p: fftwf_plan,
                                   ri: *mut f32,
                                   ii: *mut f32,
                                   ro: *mut f32,
                                   io: *mut f32);
    pub fn fftwf_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut f32,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut fftwf_complex,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut f32,
                              out: *mut fftwf_complex,
                              flags: ::std::os::raw::c_uint)
                              -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c_1d(n: ::std::os::raw::c_int,
                                 in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut fftwf_complex,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut f32,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut fftwf_complex,
                              out: *mut f32,
                              flags: ::std::os::raw::c_uint)
                              -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex,
                                 out: *mut f32,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex,
                                 out: *mut f32,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex,
                                 out: *mut f32,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                   dims: *const fftwf_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwf_iodim,
                                   in_: *mut f32,
                                   out: *mut fftwf_complex,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwf_plan;
    pub fn fftwf_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                   dims: *const fftwf_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwf_iodim,
                                   in_: *mut fftwf_complex,
                                   out: *mut f32,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwf_plan;
    pub fn fftwf_plan_guru_split_dft_r2c(rank: ::std::os::raw::c_int,
                                         dims: *const fftwf_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwf_iodim,
                                         in_: *mut f32,
                                         ro: *mut f32,
                                         io: *mut f32,
                                         flags: ::std::os::raw::c_uint)
                                         -> fftwf_plan;
    pub fn fftwf_plan_guru_split_dft_c2r(rank: ::std::os::raw::c_int,
                                         dims: *const fftwf_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwf_iodim,
                                         ri: *mut f32,
                                         ii: *mut f32,
                                         out: *mut f32,
                                         flags: ::std::os::raw::c_uint)
                                         -> fftwf_plan;
    pub fn fftwf_plan_guru64_dft_r2c(rank: ::std::os::raw::c_int,
                                     dims: *const fftwf_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwf_iodim64,
                                     in_: *mut f32,
                                     out: *mut fftwf_complex,
                                     flags: ::std::os::raw::c_uint)
                                     -> fftwf_plan;
    pub fn fftwf_plan_guru64_dft_c2r(rank: ::std::os::raw::c_int,
                                     dims: *const fftwf_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwf_iodim64,
                                     in_: *mut fftwf_complex,
                                     out: *mut f32,
                                     flags: ::std::os::raw::c_uint)
                                     -> fftwf_plan;
    pub fn fftwf_plan_guru64_split_dft_r2c(rank: ::std::os::raw::c_int,
                                           dims: *const fftwf_iodim64,
                                           howmany_rank: ::std::os::raw::c_int,
                                           howmany_dims: *const fftwf_iodim64,
                                           in_: *mut f32,
                                           ro: *mut f32,
                                           io: *mut f32,
                                           flags: ::std::os::raw::c_uint)
                                           -> fftwf_plan;
    pub fn fftwf_plan_guru64_split_dft_c2r(rank: ::std::os::raw::c_int,
                                           dims: *const fftwf_iodim64,
                                           howmany_rank: ::std::os::raw::c_int,
                                           howmany_dims: *const fftwf_iodim64,
                                           ri: *mut f32,
                                           ii: *mut f32,
                                           out: *mut f32,
                                           flags: ::std::os::raw::c_uint)
                                           -> fftwf_plan;
    pub fn fftwf_execute_dft_r2c(p: fftwf_plan, in_: *mut f32, out: *mut fftwf_complex);
    pub fn fftwf_execute_dft_c2r(p: fftwf_plan, in_: *mut fftwf_complex, out: *mut f32);
    pub fn fftwf_execute_split_dft_r2c(p: fftwf_plan, in_: *mut f32, ro: *mut f32, io: *mut f32);
    pub fn fftwf_execute_split_dft_c2r(p: fftwf_plan, ri: *mut f32, ii: *mut f32, out: *mut f32);
    pub fn fftwf_plan_many_r2r(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int,
                               in_: *mut f32,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut f32,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               kind: *const fftwf_r2r_kind,
                               flags: ::std::os::raw::c_uint)
                               -> fftwf_plan;
    pub fn fftwf_plan_r2r(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut f32,
                          out: *mut f32,
                          kind: *const fftwf_r2r_kind,
                          flags: ::std::os::raw::c_uint)
                          -> fftwf_plan;
    pub fn fftwf_plan_r2r_1d(n: ::std::os::raw::c_int,
                             in_: *mut f32,
                             out: *mut f32,
                             kind: fftwf_r2r_kind,
                             flags: ::std::os::raw::c_uint)
                             -> fftwf_plan;
    pub fn fftwf_plan_r2r_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut f32,
                             out: *mut f32,
                             kind0: fftwf_r2r_kind,
                             kind1: fftwf_r2r_kind,
                             flags: ::std::os::raw::c_uint)
                             -> fftwf_plan;
    pub fn fftwf_plan_r2r_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut f32,
                             out: *mut f32,
                             kind0: fftwf_r2r_kind,
                             kind1: fftwf_r2r_kind,
                             kind2: fftwf_r2r_kind,
                             flags: ::std::os::raw::c_uint)
                             -> fftwf_plan;
    pub fn fftwf_plan_guru_r2r(rank: ::std::os::raw::c_int,
                               dims: *const fftwf_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwf_iodim,
                               in_: *mut f32,
                               out: *mut f32,
                               kind: *const fftwf_r2r_kind,
                               flags: ::std::os::raw::c_uint)
                               -> fftwf_plan;
    pub fn fftwf_plan_guru64_r2r(rank: ::std::os::raw::c_int,
                                 dims: *const fftwf_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwf_iodim64,
                                 in_: *mut f32,
                                 out: *mut f32,
                                 kind: *const fftwf_r2r_kind,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwf_plan;
    pub fn fftwf_execute_r2r(p: fftwf_plan, in_: *mut f32, out: *mut f32);
    pub fn fftwf_destroy_plan(p: fftwf_plan);
    pub fn fftwf_forget_wisdom();
    pub fn fftwf_cleanup();
    pub fn fftwf_set_timelimit(t: f64);
    pub fn fftwf_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
    pub fn fftwf_init_threads() -> ::std::os::raw::c_int;
    pub fn fftwf_cleanup_threads();
    pub fn fftwf_export_wisdom_to_filename(filename: *const ::std::os::raw::c_char)
                                           -> ::std::os::raw::c_int;
    pub fn fftwf_export_wisdom_to_file(output_file: *mut FILE);
    pub fn fftwf_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
    pub fn fftwf_export_wisdom(write_char: fftwf_write_char_func,
                               data: *mut ::std::os::raw::c_void);
    pub fn fftwf_import_system_wisdom() -> ::std::os::raw::c_int;
    pub fn fftwf_import_wisdom_from_filename(filename: *const ::std::os::raw::c_char)
                                             -> ::std::os::raw::c_int;
    pub fn fftwf_import_wisdom_from_file(input_file: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fftwf_import_wisdom_from_string(input_string: *const ::std::os::raw::c_char)
                                           -> ::std::os::raw::c_int;
    pub fn fftwf_import_wisdom(read_char: fftwf_read_char_func,
                               data: *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int;
    pub fn fftwf_fprint_plan(p: fftwf_plan, output_file: *mut FILE);
    pub fn fftwf_print_plan(p: fftwf_plan);
    pub fn fftwf_sprint_plan(p: fftwf_plan) -> *mut ::std::os::raw::c_char;
    pub fn fftwf_malloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn fftwf_alloc_real(n: size_t) -> *mut f32;
    pub fn fftwf_alloc_complex(n: size_t) -> *mut fftwf_complex;
    pub fn fftwf_free(p: *mut ::std::os::raw::c_void);
    pub fn fftwf_flops(p: fftwf_plan, add: *mut f64, mul: *mut f64, fmas: *mut f64);
    pub fn fftwf_estimate_cost(p: fftwf_plan) -> f64;
    pub fn fftwf_cost(p: fftwf_plan) -> f64;
    pub fn fftwf_alignment_of(p: *mut f32) -> ::std::os::raw::c_int;
    pub fn fftwl_execute(p: fftwl_plan);
    pub fn fftwl_plan_dft(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut fftwl_complex,
                          out: *mut fftwl_complex,
                          sign: ::std::os::raw::c_int,
                          flags: ::std::os::raw::c_uint)
                          -> fftwl_plan;
    pub fn fftwl_plan_dft_1d(n: ::std::os::raw::c_int,
                             in_: *mut fftwl_complex,
                             out: *mut fftwl_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint)
                             -> fftwl_plan;
    pub fn fftwl_plan_dft_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut fftwl_complex,
                             out: *mut fftwl_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint)
                             -> fftwl_plan;
    pub fn fftwl_plan_dft_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut fftwl_complex,
                             out: *mut fftwl_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint)
                             -> fftwl_plan;
    pub fn fftwl_plan_many_dft(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int,
                               in_: *mut fftwl_complex,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut fftwl_complex,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint)
                               -> fftwl_plan;
    pub fn fftwl_plan_guru_dft(rank: ::std::os::raw::c_int,
                               dims: *const fftwl_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwl_iodim,
                               in_: *mut fftwl_complex,
                               out: *mut fftwl_complex,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint)
                               -> fftwl_plan;
    pub fn fftwl_plan_guru_split_dft(rank: ::std::os::raw::c_int,
                                     dims: *const fftwl_iodim,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwl_iodim,
                                     ri: *mut f64,
                                     ii: *mut f64,
                                     ro: *mut f64,
                                     io: *mut f64,
                                     flags: ::std::os::raw::c_uint)
                                     -> fftwl_plan;
    pub fn fftwl_plan_guru64_dft(rank: ::std::os::raw::c_int,
                                 dims: *const fftwl_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwl_iodim64,
                                 in_: *mut fftwl_complex,
                                 out: *mut fftwl_complex,
                                 sign: ::std::os::raw::c_int,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_guru64_split_dft(rank: ::std::os::raw::c_int,
                                       dims: *const fftwl_iodim64,
                                       howmany_rank: ::std::os::raw::c_int,
                                       howmany_dims: *const fftwl_iodim64,
                                       ri: *mut f64,
                                       ii: *mut f64,
                                       ro: *mut f64,
                                       io: *mut f64,
                                       flags: ::std::os::raw::c_uint)
                                       -> fftwl_plan;
    pub fn fftwl_execute_dft(p: fftwl_plan, in_: *mut fftwl_complex, out: *mut fftwl_complex);
    pub fn fftwl_execute_split_dft(p: fftwl_plan,
                                   ri: *mut f64,
                                   ii: *mut f64,
                                   ro: *mut f64,
                                   io: *mut f64);
    pub fn fftwl_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut f64,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut fftwl_complex,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwl_plan;
    pub fn fftwl_plan_dft_r2c(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut f64,
                              out: *mut fftwl_complex,
                              flags: ::std::os::raw::c_uint)
                              -> fftwl_plan;
    pub fn fftwl_plan_dft_r2c_1d(n: ::std::os::raw::c_int,
                                 in_: *mut f64,
                                 out: *mut fftwl_complex,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut f64,
                                 out: *mut fftwl_complex,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut f64,
                                 out: *mut fftwl_complex,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut fftwl_complex,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut f64,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwl_plan;
    pub fn fftwl_plan_dft_c2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut fftwl_complex,
                              out: *mut f64,
                              flags: ::std::os::raw::c_uint)
                              -> fftwl_plan;
    pub fn fftwl_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                 in_: *mut fftwl_complex,
                                 out: *mut f64,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut fftwl_complex,
                                 out: *mut f64,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut fftwl_complex,
                                 out: *mut f64,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                   dims: *const fftwl_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwl_iodim,
                                   in_: *mut f64,
                                   out: *mut fftwl_complex,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwl_plan;
    pub fn fftwl_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                   dims: *const fftwl_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwl_iodim,
                                   in_: *mut fftwl_complex,
                                   out: *mut f64,
                                   flags: ::std::os::raw::c_uint)
                                   -> fftwl_plan;
    pub fn fftwl_plan_guru_split_dft_r2c(rank: ::std::os::raw::c_int,
                                         dims: *const fftwl_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwl_iodim,
                                         in_: *mut f64,
                                         ro: *mut f64,
                                         io: *mut f64,
                                         flags: ::std::os::raw::c_uint)
                                         -> fftwl_plan;
    pub fn fftwl_plan_guru_split_dft_c2r(rank: ::std::os::raw::c_int,
                                         dims: *const fftwl_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwl_iodim,
                                         ri: *mut f64,
                                         ii: *mut f64,
                                         out: *mut f64,
                                         flags: ::std::os::raw::c_uint)
                                         -> fftwl_plan;
    pub fn fftwl_plan_guru64_dft_r2c(rank: ::std::os::raw::c_int,
                                     dims: *const fftwl_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwl_iodim64,
                                     in_: *mut f64,
                                     out: *mut fftwl_complex,
                                     flags: ::std::os::raw::c_uint)
                                     -> fftwl_plan;
    pub fn fftwl_plan_guru64_dft_c2r(rank: ::std::os::raw::c_int,
                                     dims: *const fftwl_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwl_iodim64,
                                     in_: *mut fftwl_complex,
                                     out: *mut f64,
                                     flags: ::std::os::raw::c_uint)
                                     -> fftwl_plan;
    pub fn fftwl_plan_guru64_split_dft_r2c(rank: ::std::os::raw::c_int,
                                           dims: *const fftwl_iodim64,
                                           howmany_rank: ::std::os::raw::c_int,
                                           howmany_dims: *const fftwl_iodim64,
                                           in_: *mut f64,
                                           ro: *mut f64,
                                           io: *mut f64,
                                           flags: ::std::os::raw::c_uint)
                                           -> fftwl_plan;
    pub fn fftwl_plan_guru64_split_dft_c2r(rank: ::std::os::raw::c_int,
                                           dims: *const fftwl_iodim64,
                                           howmany_rank: ::std::os::raw::c_int,
                                           howmany_dims: *const fftwl_iodim64,
                                           ri: *mut f64,
                                           ii: *mut f64,
                                           out: *mut f64,
                                           flags: ::std::os::raw::c_uint)
                                           -> fftwl_plan;
    pub fn fftwl_execute_dft_r2c(p: fftwl_plan, in_: *mut f64, out: *mut fftwl_complex);
    pub fn fftwl_execute_dft_c2r(p: fftwl_plan, in_: *mut fftwl_complex, out: *mut f64);
    pub fn fftwl_execute_split_dft_r2c(p: fftwl_plan, in_: *mut f64, ro: *mut f64, io: *mut f64);
    pub fn fftwl_execute_split_dft_c2r(p: fftwl_plan, ri: *mut f64, ii: *mut f64, out: *mut f64);
    pub fn fftwl_plan_many_r2r(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int,
                               in_: *mut f64,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut f64,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               kind: *const fftwl_r2r_kind,
                               flags: ::std::os::raw::c_uint)
                               -> fftwl_plan;
    pub fn fftwl_plan_r2r(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut f64,
                          out: *mut f64,
                          kind: *const fftwl_r2r_kind,
                          flags: ::std::os::raw::c_uint)
                          -> fftwl_plan;
    pub fn fftwl_plan_r2r_1d(n: ::std::os::raw::c_int,
                             in_: *mut f64,
                             out: *mut f64,
                             kind: fftwl_r2r_kind,
                             flags: ::std::os::raw::c_uint)
                             -> fftwl_plan;
    pub fn fftwl_plan_r2r_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut f64,
                             out: *mut f64,
                             kind0: fftwl_r2r_kind,
                             kind1: fftwl_r2r_kind,
                             flags: ::std::os::raw::c_uint)
                             -> fftwl_plan;
    pub fn fftwl_plan_r2r_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut f64,
                             out: *mut f64,
                             kind0: fftwl_r2r_kind,
                             kind1: fftwl_r2r_kind,
                             kind2: fftwl_r2r_kind,
                             flags: ::std::os::raw::c_uint)
                             -> fftwl_plan;
    pub fn fftwl_plan_guru_r2r(rank: ::std::os::raw::c_int,
                               dims: *const fftwl_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwl_iodim,
                               in_: *mut f64,
                               out: *mut f64,
                               kind: *const fftwl_r2r_kind,
                               flags: ::std::os::raw::c_uint)
                               -> fftwl_plan;
    pub fn fftwl_plan_guru64_r2r(rank: ::std::os::raw::c_int,
                                 dims: *const fftwl_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwl_iodim64,
                                 in_: *mut f64,
                                 out: *mut f64,
                                 kind: *const fftwl_r2r_kind,
                                 flags: ::std::os::raw::c_uint)
                                 -> fftwl_plan;
    pub fn fftwl_execute_r2r(p: fftwl_plan, in_: *mut f64, out: *mut f64);
    pub fn fftwl_destroy_plan(p: fftwl_plan);
    pub fn fftwl_forget_wisdom();
    pub fn fftwl_cleanup();
    pub fn fftwl_set_timelimit(t: f64);
    pub fn fftwl_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
    pub fn fftwl_init_threads() -> ::std::os::raw::c_int;
    pub fn fftwl_cleanup_threads();
    pub fn fftwl_export_wisdom_to_filename(filename: *const ::std::os::raw::c_char)
                                           -> ::std::os::raw::c_int;
    pub fn fftwl_export_wisdom_to_file(output_file: *mut FILE);
    pub fn fftwl_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
    pub fn fftwl_export_wisdom(write_char: fftwl_write_char_func,
                               data: *mut ::std::os::raw::c_void);
    pub fn fftwl_import_system_wisdom() -> ::std::os::raw::c_int;
    pub fn fftwl_import_wisdom_from_filename(filename: *const ::std::os::raw::c_char)
                                             -> ::std::os::raw::c_int;
    pub fn fftwl_import_wisdom_from_file(input_file: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fftwl_import_wisdom_from_string(input_string: *const ::std::os::raw::c_char)
                                           -> ::std::os::raw::c_int;
    pub fn fftwl_import_wisdom(read_char: fftwl_read_char_func,
                               data: *mut ::std::os::raw::c_void)
                               -> ::std::os::raw::c_int;
    pub fn fftwl_fprint_plan(p: fftwl_plan, output_file: *mut FILE);
    pub fn fftwl_print_plan(p: fftwl_plan);
    pub fn fftwl_sprint_plan(p: fftwl_plan) -> *mut ::std::os::raw::c_char;
    pub fn fftwl_malloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn fftwl_alloc_real(n: size_t) -> *mut f64;
    pub fn fftwl_alloc_complex(n: size_t) -> *mut fftwl_complex;
    pub fn fftwl_free(p: *mut ::std::os::raw::c_void);
    pub fn fftwl_flops(p: fftwl_plan, add: *mut f64, mul: *mut f64, fmas: *mut f64);
    pub fn fftwl_estimate_cost(p: fftwl_plan) -> f64;
    pub fn fftwl_cost(p: fftwl_plan) -> f64;
    pub fn fftwl_alignment_of(p: *mut f64) -> ::std::os::raw::c_int;
}
